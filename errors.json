[{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":523,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":523,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tag' is defined but never used.","line":533,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":533,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tag' is defined but never used.","line":538,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":543,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":543,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":558,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":558,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'versionId' is defined but never used.","line":559,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":559,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":592,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":592,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeRange' is defined but never used.","line":593,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":593,"endColumn":12}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport type { z } from \"zod\"\n\nimport { sql } from \"@/lib/db\"\nimport { promptSchema } from \"@/lib/validations/prompt\"\nimport { sanitizeInput } from \"@/lib/validation-utils\"\n\nexport type LegalPrompt = {\n  id: number\n  name: string\n  prompt: string\n  category: string\n  systemMessage: string | null\n  createdAt: string\n  updatedAt?: string\n  variables?: string[]\n  usageCount?: number\n  isFavorite?: boolean\n}\n\nexport type PromptError = {\n  message: string\n  errors?: Record<string, string>\n  code?: string\n}\n\nexport async function getPrompts() {\n  try {\n    // Check if DATABASE_URL is available\n    if (!process.env.DATABASE_URL) {\n      console.error(\"DATABASE_URL is not set\")\n      return {\n        prompts: [],\n        error: \"Database connection not configured. Please check your environment variables.\",\n      }\n    }\n\n    // Use the tagged template syntax for the Neon client\n    const result = await sql`\n      SELECT * FROM legalprompt \n      ORDER BY \"createdAt\" DESC\n    `\n\n    return { prompts: result, error: null }\n  } catch (error) {\n    console.error(\"Failed to fetch prompts:\", error)\n    return {\n      prompts: [],\n      error: `Failed to fetch prompts: ${error.message}. Please check your database connection.`,\n    }\n  }\n}\n\nexport async function getPromptById(id: number) {\n  try {\n    const result = await sql`\n      SELECT * FROM legalprompt\n      WHERE id = ${id}\n    `\n    return result[0]\n  } catch (error) {\n    console.error(\"Failed to fetch prompt:\", error)\n    throw new Error(\"Failed to fetch prompt\")\n  }\n}\n\n/**\n * Get all prompts with enhanced filtering, pagination, and error handling\n */\nexport async function getLegalPrompts(options?: {\n  search?: string\n  category?: string[]\n  sortBy?: string\n  limit?: number\n  offset?: number\n  dateRange?: { from?: string; to?: string }\n  includeSystemMessages?: boolean\n  favoritesOnly?: boolean\n}): Promise<{ prompts: LegalPrompt[]; total: number }> {\n  try {\n    // Set default limit to avoid retrieving too much data\n    const limit = options?.limit || 10\n    const offset = options?.offset || 0\n\n    // This is a simplified implementation - in a real app, you would build\n    // the query dynamically based on the options\n    const result = await sql`\n      SELECT * FROM legalprompt\n      ORDER BY \"createdAt\" DESC\n      LIMIT ${limit} OFFSET ${offset}\n    `\n\n    // Get total count\n    const countResult = await sql`SELECT COUNT(*) as total FROM legalprompt`\n    const total = Number.parseInt(countResult[0].total)\n\n    return { prompts: result, total }\n  } catch (error) {\n    console.error(\"Error fetching prompts:\", error)\n    // Return empty results instead of throwing to prevent page errors\n    return { prompts: [], total: 0 }\n  }\n}\n\n/**\n * Get a single prompt by ID with enhanced error handling\n */\nexport async function getLegalPromptById(id: number): Promise<LegalPrompt | null> {\n  try {\n    const results = await sql`\n      SELECT id, name, prompt, category, \"systemMessage\", \"createdAt\"\n      FROM legalprompt \n      WHERE id = ${id}\n    `\n\n    if (results.length === 0) {\n      return null\n    }\n\n    // Extract variables from the prompt\n    const prompt = results[0]\n    const variables = extractVariables(prompt.prompt)\n\n    // Instead of querying the non-existent prompt_usage table,\n    // we'll return a default value for usageCount\n    return {\n      ...prompt,\n      variables,\n      usageCount: 0, // Default value since the table doesn't exist\n    }\n  } catch (error) {\n    console.error(`Error fetching prompt ${id}:`, error)\n    return null\n  }\n}\n\nexport async function createPrompt(formData: FormData) {\n  try {\n    const title = formData.get(\"title\") as string\n    const description = formData.get(\"description\") as string\n    const content = formData.get(\"content\") as string\n    const category = formData.get(\"category\") as string\n\n    // Create a new Date object for the current time\n    const createdAt = new Date().toISOString()\n\n    await sql`\n      INSERT INTO legalprompt (name, prompt, category, \"systemMessage\", \"createdAt\")\n      VALUES (${title}, ${description}, ${category}, ${content}, ${createdAt})\n    `\n\n    revalidatePath(\"/\")\n    redirect(\"/\")\n  } catch (error) {\n    console.error(\"Failed to create prompt:\", error)\n    throw new Error(\"Failed to create prompt\")\n  }\n}\n\n/**\n * Create a new prompt with enhanced validation\n */\nexport async function createLegalPrompt(\n  data: z.infer<typeof promptSchema>,\n): Promise<{ success: boolean; data?: LegalPrompt; error?: PromptError }> {\n  try {\n    // Validate the input data using Zod\n    const validationResult = promptSchema.safeParse(data)\n\n    if (!validationResult.success) {\n      return {\n        success: false,\n        error: {\n          message: \"Validation failed\",\n          errors: validationResult.error.format(),\n          code: \"VALIDATION_ERROR\",\n        },\n      }\n    }\n\n    // Sanitize inputs to prevent XSS\n    const sanitizedData = {\n      name: sanitizeInput(data.name),\n      prompt: data.prompt, // Don't sanitize prompt as it may contain intentional special characters\n      category: sanitizeInput(data.category),\n      systemMessage: data.systemMessage ? data.systemMessage : null,\n    }\n\n    // Insert the new prompt\n    const result = await sql`\n      INSERT INTO legalprompt (name, prompt, category, \"systemMessage\")\n      VALUES (${sanitizedData.name}, ${sanitizedData.prompt}, ${sanitizedData.category}, ${sanitizedData.systemMessage})\n      RETURNING id, name, prompt, category, \"systemMessage\", \"createdAt\"\n    `\n\n    revalidatePath(\"/\")\n    return { success: true, data: result[0] }\n  } catch (error) {\n    console.error(\"Error creating prompt:\", error)\n\n    // Handle specific database errors\n    if (error instanceof Error) {\n      if (error.message.includes(\"duplicate key\")) {\n        return {\n          success: false,\n          error: {\n            message: \"A prompt with this name already exists.\",\n            code: \"DUPLICATE_ERROR\",\n          },\n        }\n      }\n    }\n\n    return {\n      success: false,\n      error: {\n        message: \"Failed to create prompt. Please try again.\",\n        code: \"SERVER_ERROR\",\n      },\n    }\n  }\n}\n\nexport async function updatePrompt(id: number, formData: FormData) {\n  try {\n    const title = formData.get(\"title\") as string\n    const description = formData.get(\"description\") as string\n    const content = formData.get(\"content\") as string\n    const category = formData.get(\"category\") as string\n\n    await sql`\n      UPDATE legalprompt\n      SET name = ${title}, \n          prompt = ${description}, \n          category = ${category}, \n          \"systemMessage\" = ${content}\n      WHERE id = ${id}\n    `\n\n    revalidatePath(`/prompts/${id}`)\n    revalidatePath(\"/\")\n    redirect(`/prompts/${id}`)\n  } catch (error) {\n    console.error(\"Failed to update prompt:\", error)\n    throw new Error(\"Failed to update prompt\")\n  }\n}\n\n/**\n * Update an existing prompt with enhanced validation and error handling\n */\nexport async function updateLegalPrompt(\n  id: number,\n  data: Partial<z.infer<typeof promptSchema>>,\n): Promise<{ success: boolean; data?: LegalPrompt; error?: PromptError }> {\n  try {\n    // Get the current data to merge with updates\n    const currentResults = await sql`\n      SELECT id, name, prompt, category, \"systemMessage\" \n      FROM legalprompt \n      WHERE id = ${id}\n    `\n\n    if (currentResults.length === 0) {\n      return {\n        success: false,\n        error: {\n          message: `Prompt with ID ${id} not found`,\n          code: \"NOT_FOUND\",\n        },\n      }\n    }\n\n    const current = currentResults[0]\n\n    // Merge the existing data with the updates\n    const updatedData = {\n      name: data.name !== undefined ? data.name : current.name,\n      prompt: data.prompt !== undefined ? data.prompt : current.prompt,\n      category: data.category !== undefined ? data.category : current.category,\n      systemMessage: data.systemMessage !== undefined ? data.systemMessage : current.systemMessage,\n    }\n\n    // Validate the merged data\n    const validationResult = promptSchema.safeParse(updatedData)\n\n    if (!validationResult.success) {\n      return {\n        success: false,\n        error: {\n          message: \"Validation failed\",\n          errors: validationResult.error.format(),\n          code: \"VALIDATION_ERROR\",\n        },\n      }\n    }\n\n    // Sanitize inputs\n    const sanitizedData = {\n      name: sanitizeInput(updatedData.name),\n      prompt: updatedData.prompt,\n      category: sanitizeInput(updatedData.category),\n      systemMessage: updatedData.systemMessage,\n    }\n\n    // Update the prompt\n    const result = await sql`\n      UPDATE legalprompt \n      SET name = ${sanitizedData.name}, \n          prompt = ${sanitizedData.prompt}, \n          category = ${sanitizedData.category}, \n          \"systemMessage\" = ${sanitizedData.systemMessage}\n      WHERE id = ${id} \n      RETURNING id, name, prompt, category, \"systemMessage\", \"createdAt\"\n    `\n\n    revalidatePath(\"/\")\n    revalidatePath(`/prompts/${id}`)\n    return { success: true, data: result[0] }\n  } catch (error) {\n    console.error(`Error updating prompt ${id}:`, error)\n    return {\n      success: false,\n      error: {\n        message: \"Failed to update prompt. Please try again.\",\n        code: \"SERVER_ERROR\",\n      },\n    }\n  }\n}\n\nexport async function deletePrompt(id: number) {\n  try {\n    await sql`DELETE FROM legalprompt WHERE id = ${id}`\n    revalidatePath(\"/\")\n    redirect(\"/\")\n  } catch (error) {\n    console.error(\"Failed to delete prompt:\", error)\n    throw new Error(\"Failed to delete prompt\")\n  }\n}\n\n/**\n * Helper function to extract variables from prompt text\n */\nfunction extractVariables(text: string): string[] {\n  const regex = /\\{\\{([^}]+)\\}\\}/g\n  const matches = text.match(regex) || []\n  return [...new Set(matches.map((match) => match.slice(2, -2)))]\n}\n\n/**\n * Duplicate an existing prompt\n */\nexport async function duplicateLegalPrompt(\n  id: number,\n): Promise<{ success: boolean; data?: LegalPrompt; error?: string }> {\n  try {\n    // First, get the prompt to duplicate\n    const results = await sql`\n      SELECT name, prompt, category, \"systemMessage\"\n      FROM legalprompt \n      WHERE id = ${id}\n    `\n\n    if (results.length === 0) {\n      return {\n        success: false,\n        error: `Prompt with ID ${id} not found`,\n      }\n    }\n\n    const originalPrompt = results[0]\n\n    // Create a copy with \"Copy of\" prefix\n    const newPrompt = {\n      name: `Copy of ${originalPrompt.name}`,\n      prompt: originalPrompt.prompt,\n      category: originalPrompt.category,\n      systemMessage: originalPrompt.systemMessage,\n    }\n\n    // Insert the new prompt\n    const insertResult = await sql`\n      INSERT INTO legalprompt (name, prompt, category, \"systemMessage\")\n      VALUES (${newPrompt.name}, ${newPrompt.prompt}, ${newPrompt.category}, ${newPrompt.systemMessage}) \n      RETURNING id, name, prompt, category, \"systemMessage\", \"createdAt\"\n    `\n\n    revalidatePath(\"/\")\n    return { success: true, data: insertResult[0] }\n  } catch (error) {\n    console.error(`Error duplicating prompt ${id}:`, error)\n    return {\n      success: false,\n      error: \"Failed to duplicate prompt. Please try again.\",\n    }\n  }\n}\n\n/**\n * Delete a prompt\n */\nexport async function deleteLegalPrompt(id: number): Promise<{ success: boolean; error?: string }> {\n  try {\n    await sql`DELETE FROM legalprompt WHERE id = ${id}`\n    revalidatePath(\"/\")\n    return { success: true }\n  } catch (error) {\n    console.error(`Error deleting prompt ${id}:`, error)\n    return {\n      success: false,\n      error: \"Failed to delete prompt. Please try again.\",\n    }\n  }\n}\n\nexport async function bulkDeletePrompts(ids: string[]) {\n  try {\n    if (!ids || ids.length === 0) {\n      return { error: \"No prompts selected for deletion.\" }\n    }\n\n    const numericIds = ids.map((id) => Number.parseInt(id))\n\n    // This is a simplified approach - in a real app, you would use a more efficient method\n    for (const id of numericIds) {\n      await sql`DELETE FROM legalprompt WHERE id = ${id}`\n    }\n\n    revalidatePath(\"/\")\n    return { success: `${ids.length} prompts deleted successfully.` }\n  } catch (error) {\n    console.error(\"Failed to delete prompts:\", error)\n    return { error: \"Failed to delete prompts.\" }\n  }\n}\n\n/**\n * Get all unique categories\n */\nexport async function getCategories(): Promise<string[]> {\n  try {\n    const results = await sql`\n      SELECT DISTINCT category FROM legalprompt ORDER BY category\n    `\n    return results.map((row) => row.category)\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error)\n    return []\n  }\n}\n\n/**\n * Get prompt statistics\n */\nexport async function getPromptStats(): Promise<{\n  total: number\n  byCategory: Record<string, number>\n  recentlyCreated: number\n  recentlyUpdated: number\n  mostUsed: { name: string; count: number }[]\n}> {\n  try {\n    // Get total count\n    const totalResult = await sql`SELECT COUNT(*) as count FROM legalprompt`\n    const total = Number.parseInt(totalResult[0].count)\n\n    // Get count by category\n    const categoryResults = await sql`\n      SELECT category, COUNT(*) as count \n      FROM legalprompt \n      GROUP BY category \n      ORDER BY count DESC\n    `\n\n    const byCategory: Record<string, number> = {}\n    categoryResults.forEach((row) => {\n      byCategory[row.category] = Number.parseInt(row.count)\n    })\n\n    // Get recently created count (last 7 days)\n    const recentlyCreatedResult = await sql`\n      SELECT COUNT(*) as count \n      FROM legalprompt \n      WHERE \"createdAt\" > NOW() - INTERVAL '7 days'\n    `\n\n    const recentlyCreated = Number.parseInt(recentlyCreatedResult[0].count)\n\n    // Since updatedAt doesn't exist, use createdAt as a fallback\n    const recentlyUpdated = recentlyCreated\n\n    // Mock most used prompts since we don't have the prompt_usage table\n    const mostUsed = [\n      { name: \"Contract Review\", count: 42 },\n      { name: \"Legal Research\", count: 38 },\n      { name: \"Client Advice\", count: 27 },\n    ]\n\n    return {\n      total,\n      byCategory,\n      recentlyCreated,\n      recentlyUpdated,\n      mostUsed,\n    }\n  } catch (error) {\n    console.error(\"Error fetching prompt statistics:\", error)\n    return {\n      total: 0,\n      byCategory: {},\n      recentlyCreated: 0,\n      recentlyUpdated: 0,\n      mostUsed: [],\n    }\n  }\n}\n\nexport async function getPromptTags(promptId: number): Promise<string[]> {\n  // Mock implementation\n  return []\n}\n\nexport async function getAllTags(): Promise<string[]> {\n  // Mock implementation\n  return [\"contract\", \"legal-analysis\", \"client-advice\", \"research\", \"litigation\", \"corporate\"]\n}\n\nexport async function createTag(tag: string): Promise<{ success: boolean; error?: string }> {\n  // Mock implementation\n  return { success: true }\n}\n\nexport async function deleteTag(tag: string): Promise<{ success: boolean; error?: string }> {\n  // Mock implementation\n  return { success: true }\n}\n\nexport async function getPromptVersions(promptId: number): Promise<{\n  success: boolean\n  versions?: any[]\n  error?: string\n}> {\n  // Mock implementation\n  return {\n    success: true,\n    versions: [\n      // Mock data\n    ],\n  }\n}\n\nexport async function restorePromptVersion(\n  promptId: number,\n  versionId: number,\n): Promise<{\n  success: boolean\n  error?: string\n}> {\n  // Mock implementation\n  return { success: true }\n}\n\nexport async function testPrompt(content: string, variables: Record<string, string>) {\n  // Mock implementation\n  return {\n    success: true,\n    response: `This is a mock response for the prompt: \"${content}\" with variables: ${JSON.stringify(variables)}`,\n  }\n}\n\nexport async function savePromptTest(testResult: any): Promise<{\n  success: boolean\n  data?: any\n  error?: string\n}> {\n  // Mock implementation\n  return {\n    success: true,\n    data: {\n      ...testResult,\n      id: Math.floor(Math.random() * 1000) + 1,\n    },\n  }\n}\n\nexport async function getPromptAnalytics(\n  promptId: number,\n  timeRange: string,\n): Promise<{\n  success: boolean\n  data?: any\n  error?: string\n}> {\n  // Mock implementation\n  return {\n    success: true,\n    data: {\n      // Mock data\n    },\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/actions/ai-actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/ai/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/functions/get-joke/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/functions/get-weather/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/functions/get_joke/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/functions/get_weather/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/turn_response/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/vector_stores/add_file/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/vector_stores/create_store/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/vector_stores/list_files/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/vector_stores/retrieve_store/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/api/vector_stores/upload_file/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/categories/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/not-found.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":8,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[322,364],"text":"The page you&apos;re looking for doesn't exist."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[322,364],"text":"The page you&lsquo;re looking for doesn't exist."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[322,364],"text":"The page you&#39;re looking for doesn't exist."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[322,364],"text":"The page you&rsquo;re looking for doesn't exist."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":8,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[322,364],"text":"The page you're looking for doesn&apos;t exist."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[322,364],"text":"The page you're looking for doesn&lsquo;t exist."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[322,364],"text":"The page you're looking for doesn&#39;t exist."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[322,364],"text":"The page you're looking for doesn&rsquo;t exist."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function NotFound() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n      <h1 className=\"text-4xl font-bold mb-4\">404 - Not Found</h1>\n      <p className=\"text-muted-foreground mb-8\">The page you're looking for doesn't exist.</p>\n      <Link href=\"/\" passHref>\n        <Button>Return to Home</Button>\n      </Link>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/[id]/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tags' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PromptDetailSkeleton' is defined but never used.","line":127,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PromptTesterSkeleton' is defined but never used.","line":138,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { notFound } from \"next/navigation\"\nimport { PromptTesterStreaming } from \"@/components/prompt-tester-streaming\"\nimport { getLegalPromptById, getPromptTags } from \"@/app/actions\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { formatDate } from \"@/lib/utils\"\nimport { BarChart2, Pencil } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { PromptActions } from \"@/components/prompt-actions\"\nimport { PageContainer } from \"@/components/layout/page-container\"\nimport { Badge } from \"@/components/ui/badge\"\n\ninterface PromptPageProps {\n  params: {\n    id: string\n  }\n}\n\nexport default async function PromptPage({ params }: PromptPageProps) {\n  const promptId = Number.parseInt(params.id)\n\n  if (isNaN(promptId)) {\n    return notFound()\n  }\n\n  const prompt = await getLegalPromptById(promptId)\n\n  if (!prompt) {\n    return notFound()\n  }\n\n  // Get tags for this prompt\n  const tags = await getPromptTags(promptId)\n\n  // Extract variables from the prompt\n  const variables = prompt.variables || []\n\n  return (\n    <PageContainer>\n      <div className=\"mb-6 sm:mb-10 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold tracking-tight break-words\">{prompt.name}</h1>\n          <div className=\"flex flex-wrap items-center gap-3 mt-2\">\n            <Badge variant=\"secondary\" className=\"px-2 py-1\">\n              {prompt.category}\n            </Badge>\n            <p className=\"text-xs sm:text-sm text-muted-foreground\">Created {formatDate(prompt.createdAt)}</p>\n          </div>\n        </div>\n        <div className=\"flex flex-wrap gap-3\">\n          <Button asChild variant=\"outline\" className=\"gap-2\">\n            <Link href={`/prompts/${promptId}/edit`}>\n              <Pencil className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Edit</span>\n            </Link>\n          </Button>\n          <Button asChild variant=\"outline\" className=\"gap-2\">\n            <Link href={`/prompts/${promptId}/analytics`}>\n              <BarChart2 className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n            </Link>\n          </Button>\n          <PromptActions promptId={promptId} promptName={prompt.name} />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2 lg:gap-8\">\n        <div className=\"space-y-8\">\n          <Card className=\"overflow-hidden\">\n            <CardHeader className=\"bg-muted/30 pb-3\">\n              <CardTitle>Prompt</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"whitespace-pre-wrap rounded-md bg-muted/50 p-4 font-mono text-sm border border-border/40\">\n                {prompt.prompt}\n              </div>\n            </CardContent>\n          </Card>\n\n          {prompt.systemMessage && (\n            <Card className=\"overflow-hidden\">\n              <CardHeader className=\"bg-muted/30 pb-3\">\n                <CardTitle>System Message</CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-6\">\n                <div className=\"whitespace-pre-wrap rounded-md bg-muted/50 p-4 font-mono text-sm border border-border/40\">\n                  {prompt.systemMessage}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card className=\"overflow-hidden\">\n            <CardHeader className=\"bg-muted/30 pb-3\">\n              <CardTitle>Variables</CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              {variables.length > 0 ? (\n                <ul className=\"grid grid-cols-2 gap-2\">\n                  {variables.map((variable) => (\n                    <li key={variable} className=\"font-mono text-sm bg-muted/50 p-2 rounded-md border border-border/40\">\n                      {variable}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"text-muted-foreground\">No variables found in this prompt.</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <PromptTesterStreaming\n            promptId={promptId}\n            prompt={prompt.prompt}\n            systemMessage={prompt.systemMessage}\n            variables={variables}\n          />\n        </div>\n      </div>\n    </PageContainer>\n  )\n}\n\nfunction PromptDetailSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      <Skeleton className=\"h-8 w-1/3\" />\n      <Skeleton className=\"h-4 w-1/4\" />\n      <Skeleton className=\"h-32 w-full\" />\n      <Skeleton className=\"h-32 w-full\" />\n    </div>\n  )\n}\n\nfunction PromptTesterSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      <Skeleton className=\"h-8 w-1/3\" />\n      <Skeleton className=\"h-4 w-1/2\" />\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-1/6\" />\n        <Skeleton className=\"h-24 w-full\" />\n      </div>\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-1/6\" />\n        <Skeleton className=\"h-24 w-full\" />\n      </div>\n      <Skeleton className=\"h-10 w-full\" />\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/new/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/app/prompts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/advanced-search.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ai-prompt-assistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/annotations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/assistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/bulk-actions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/category-manager.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":235,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to &quot;Uncategorized\".\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to &ldquo;Uncategorized\".\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to &#34;Uncategorized\".\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to &rdquo;Uncategorized\".\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":235,"column":94,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to \"Uncategorized&quot;.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to \"Uncategorized&ldquo;.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to \"Uncategorized&#34;.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8554,8663],"text":"\n              This will delete the category and move all associated prompts to \"Uncategorized&rdquo;.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Plus, Edit, Trash2, Save, X } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { sql } from \"@/lib/db\"\nimport { motion, AnimatePresence } from \"framer-motion\"\n\ninterface CategoryManagerProps {\n  initialCategories: string[]\n}\n\nexport function CategoryManager({ initialCategories }: CategoryManagerProps) {\n  const [categories, setCategories] = useState(initialCategories)\n  const [newCategory, setNewCategory] = useState(\"\")\n  const [editingIndex, setEditingIndex] = useState<number | null>(null)\n  const [editValue, setEditValue] = useState(\"\")\n  const [deleteIndex, setDeleteIndex] = useState<number | null>(null)\n  const router = useRouter()\n\n  const handleAddCategory = async () => {\n    if (!newCategory.trim()) return\n\n    try {\n      // This is a simplified approach - in a real app, you might want to create a proper categories table\n      await sql`\n        INSERT INTO legalprompt (name, prompt, category, \"systemMessage\")\n        VALUES ('Category Template', 'Template for category', ${newCategory}, NULL)\n      `\n\n      setCategories([...categories, newCategory])\n      setNewCategory(\"\")\n      toast({\n        title: \"Category added\",\n        description: `The category \"${newCategory}\" has been added.`,\n      })\n      router.refresh()\n    } catch (error) {\n      console.error(\"Error adding category:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to add the category.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleEditCategory = async (index: number) => {\n    if (!editValue.trim() || editValue === categories[index]) {\n      setEditingIndex(null)\n      return\n    }\n\n    const oldCategory = categories[index]\n\n    try {\n      // Update all prompts with the old category\n      await sql`\n        UPDATE legalprompt\n        SET category = ${editValue}\n        WHERE category = ${oldCategory}\n      `\n\n      const newCategories = [...categories]\n      newCategories[index] = editValue\n      setCategories(newCategories)\n      setEditingIndex(null)\n\n      toast({\n        title: \"Category updated\",\n        description: `The category has been renamed from \"${oldCategory}\" to \"${editValue}\".`,\n      })\n      router.refresh()\n    } catch (error) {\n      console.error(\"Error updating category:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to update the category.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const handleDeleteCategory = async () => {\n    if (deleteIndex === null) return\n\n    const categoryToDelete = categories[deleteIndex]\n\n    try {\n      // Update prompts to use a default category\n      await sql`\n        UPDATE legalprompt\n        SET category = 'Uncategorized'\n        WHERE category = ${categoryToDelete}\n      `\n\n      const newCategories = categories.filter((_, i) => i !== deleteIndex)\n      setCategories(newCategories)\n      setDeleteIndex(null)\n\n      toast({\n        title: \"Category deleted\",\n        description: `The category \"${categoryToDelete}\" has been deleted. All associated prompts have been moved to \"Uncategorized\".`,\n      })\n      router.refresh()\n    } catch (error) {\n      console.error(\"Error deleting category:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete the category.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>\n      <Card className=\"shadow-sm\">\n        <CardHeader className=\"border-b\">\n          <CardTitle>Categories</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Manage your prompt categories</p>\n        </CardHeader>\n        <CardContent className=\"space-y-6 pt-6\">\n          <div className=\"flex flex-col sm:flex-row gap-2\">\n            <Input\n              placeholder=\"New category name\"\n              value={newCategory}\n              onChange={(e) => setNewCategory(e.target.value)}\n              className=\"flex-1 shadow-sm\"\n            />\n            <Button onClick={handleAddCategory} className=\"gap-2 shadow-sm w-full sm:w-auto\">\n              <Plus className=\"h-4 w-4\" />\n              Add\n            </Button>\n          </div>\n\n          <div className=\"space-y-2\">\n            {categories.length === 0 ? (\n              <div className=\"text-center py-8 bg-muted/30 rounded-lg border border-dashed border-muted\">\n                <p className=\"text-sm text-muted-foreground\">No categories found. Add your first category above.</p>\n              </div>\n            ) : (\n              <AnimatePresence>\n                {categories.map((category, index) => (\n                  <motion.div\n                    key={category}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, x: -10 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"flex items-center justify-between p-3 bg-muted/50 rounded-md border border-border/50 hover:border-border transition-colors\"\n                  >\n                    {editingIndex === index ? (\n                      <div className=\"flex-1 flex flex-col sm:flex-row gap-2\">\n                        <Input\n                          value={editValue}\n                          onChange={(e) => setEditValue(e.target.value)}\n                          autoFocus\n                          className=\"shadow-sm\"\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleEditCategory(index)}\n                            className=\"w-full sm:w-auto\"\n                          >\n                            <Save className=\"h-4 w-4 sm:mr-2\" />\n                            <span className=\"hidden sm:inline\">Save</span>\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => setEditingIndex(null)}\n                            className=\"w-full sm:w-auto\"\n                          >\n                            <X className=\"h-4 w-4 sm:mr-2\" />\n                            <span className=\"hidden sm:inline\">Cancel</span>\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <>\n                        <span className=\"font-medium truncate pr-2\">{category}</span>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => {\n                              setEditingIndex(index)\n                              setEditValue(category)\n                            }}\n                            className=\"hover:bg-muted\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => setDeleteIndex(index)}\n                            className=\"hover:bg-destructive/10 hover:text-destructive\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </>\n                    )}\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={deleteIndex !== null} onOpenChange={(open) => !open && setDeleteIndex(null)}>\n        <AlertDialogContent className=\"shadow-lg\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will delete the category and move all associated prompts to \"Uncategorized\".\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDeleteCategory} className=\"bg-destructive text-destructive-foreground\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </motion.div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/category-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/chat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/collaborative-workspace.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShareLink' is assigned a value but never used.","line":80,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Users, Share2, Lock, Globe, UserPlus, Copy, Check, Settings, MoreHorizontal } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Section } from \"./layout/section\"\nimport { SlideUp } from \"./ui/motion\"\n\n// Mock team members - in a real app, this would come from an API\nconst TEAM_MEMBERS = [\n  {\n    id: 1,\n    name: \"Alex Johnson\",\n    email: \"alex@example.com\",\n    avatar: \"/placeholder.svg?height=40&width=40\",\n    role: \"Admin\",\n  },\n  {\n    id: 2,\n    name: \"Sarah Williams\",\n    email: \"sarah@example.com\",\n    avatar: \"/placeholder.svg?height=40&width=40\",\n    role: \"Editor\",\n  },\n  {\n    id: 3,\n    name: \"Michael Brown\",\n    email: \"michael@example.com\",\n    avatar: \"/placeholder.svg?height=40&width=40\",\n    role: \"Viewer\",\n  },\n]\n\n// Mock workspaces - in a real app, this would come from an API\nconst WORKSPACES = [\n  {\n    id: 1,\n    name: \"Contract Templates\",\n    description: \"Standard legal contract templates\",\n    promptCount: 12,\n    members: 5,\n    visibility: \"private\",\n  },\n  {\n    id: 2,\n    name: \"Client Advice\",\n    description: \"Prompts for client consultations\",\n    promptCount: 8,\n    members: 3,\n    visibility: \"shared\",\n  },\n  {\n    id: 3,\n    name: \"Research Queries\",\n    description: \"Legal research assistance prompts\",\n    promptCount: 15,\n    members: 7,\n    visibility: \"public\",\n  },\n]\n\nexport function CollaborativeWorkspace() {\n  const [activeWorkspace, setActiveWorkspace] = useState(WORKSPACES[0])\n  const [shareLink, setShareLink] = useState(\"https://legal-prompts.app/workspace/contract-templates\")\n  const [copied, setCopied] = useState(false)\n  const [isPublic, setIsPublic] = useState(activeWorkspace.visibility === \"public\")\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(shareLink)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n\n    toast({\n      title: \"Link copied\",\n      description: \"Workspace link copied to clipboard\",\n    })\n  }\n\n  const handleVisibilityChange = (checked: boolean) => {\n    setIsPublic(checked)\n\n    toast({\n      title: `Workspace is now ${checked ? \"public\" : \"private\"}`,\n      description: `Anyone ${checked ? \"with the link can\" : \"you invite can\"} access this workspace`,\n    })\n  }\n\n  return (\n    <SlideUp>\n      <Section\n        title=\"Collaborative Workspace\"\n        description=\"Share and collaborate on prompts with your team\"\n        contentClassName=\"space-y-6\"\n      >\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-start\">\n              <div className=\"space-y-1\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5 text-primary\" />\n                  {activeWorkspace.name}\n                </CardTitle>\n                <CardDescription>{activeWorkspace.description}</CardDescription>\n              </div>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuLabel>Workspace Options</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Workspace Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Invite Members\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"text-destructive\">Delete Workspace</DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                {activeWorkspace.promptCount} Prompts\n              </Badge>\n\n              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                <Users className=\"h-3 w-3\" />\n                {activeWorkspace.members} Members\n              </Badge>\n\n              <Badge\n                variant={\n                  activeWorkspace.visibility === \"public\"\n                    ? \"default\"\n                    : activeWorkspace.visibility === \"shared\"\n                      ? \"secondary\"\n                      : \"outline\"\n                }\n                className=\"flex items-center gap-1\"\n              >\n                {activeWorkspace.visibility === \"public\" ? (\n                  <Globe className=\"h-3 w-3\" />\n                ) : activeWorkspace.visibility === \"shared\" ? (\n                  <Share2 className=\"h-3 w-3\" />\n                ) : (\n                  <Lock className=\"h-3 w-3\" />\n                )}\n                {activeWorkspace.visibility === \"public\"\n                  ? \"Public\"\n                  : activeWorkspace.visibility === \"shared\"\n                    ? \"Shared\"\n                    : \"Private\"}\n              </Badge>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs defaultValue=\"members\">\n              <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"members\">Team Members</TabsTrigger>\n                <TabsTrigger value=\"sharing\">Sharing</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"members\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  {TEAM_MEMBERS.map((member) => (\n                    <div key={member.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={member.avatar} alt={member.name} />\n                          <AvatarFallback>\n                            {member.name\n                              .split(\" \")\n                              .map((n) => n[0])\n                              .join(\"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-medium\">{member.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{member.email}</div>\n                        </div>\n                      </div>\n\n                      <Badge\n                        variant={\n                          member.role === \"Admin\" ? \"default\" : member.role === \"Editor\" ? \"secondary\" : \"outline\"\n                        }\n                      >\n                        {member.role}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n\n                <Button className=\"w-full gap-2\">\n                  <UserPlus className=\"h-4 w-4\" />\n                  Invite New Member\n                </Button>\n              </TabsContent>\n\n              <TabsContent value=\"sharing\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"visibility\">Workspace Visibility</Label>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center gap-2\">\n                        {isPublic ? <Globe className=\"h-4 w-4\" /> : <Lock className=\"h-4 w-4\" />}\n                        <span>{isPublic ? \"Public workspace\" : \"Private workspace\"}</span>\n                      </div>\n                      <Switch id=\"visibility\" checked={isPublic} onCheckedChange={handleVisibilityChange} />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {isPublic\n                        ? \"Anyone with the link can view this workspace\"\n                        : \"Only invited members can access this workspace\"}\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"share-link\">Share Link</Label>\n                    <div className=\"flex gap-2\">\n                      <Input id=\"share-link\" value={shareLink} readOnly className=\"flex-1\" />\n                      <Button variant=\"outline\" size=\"icon\" onClick={handleCopyLink}>\n                        {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n\n          <CardFooter className=\"flex justify-between border-t pt-6\">\n            <div className=\"flex -space-x-2\">\n              {TEAM_MEMBERS.map((member) => (\n                <Avatar key={member.id} className=\"border-2 border-background\">\n                  <AvatarImage src={member.avatar} alt={member.name} />\n                  <AvatarFallback>\n                    {member.name\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </AvatarFallback>\n                </Avatar>\n              ))}\n              <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary text-primary-foreground text-xs font-medium border-2 border-background\">\n                +2\n              </div>\n            </div>\n\n            <Button variant=\"outline\" className=\"gap-2\">\n              <Share2 className=\"h-4 w-4\" />\n              Share Workspace\n            </Button>\n          </CardFooter>\n        </Card>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          {WORKSPACES.map((workspace) => (\n            <Card\n              key={workspace.id}\n              className={`cursor-pointer transition-all hover:shadow-md ${\n                activeWorkspace.id === workspace.id ? \"border-primary\" : \"\"\n              }`}\n              onClick={() => setActiveWorkspace(workspace)}\n            >\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-lg\">{workspace.name}</CardTitle>\n                <CardDescription>{workspace.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                    {workspace.promptCount} Prompts\n                  </Badge>\n\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Users className=\"h-3 w-3\" />\n                    {workspace.members} Members\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </Section>\n    </SlideUp>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/command-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/country-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/create-prompt-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/dashboard-stats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'summaryData' is assigned a value but never used.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { getPromptStats } from \"@/app/actions\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface PromptStats {\n  total: number\n  byCategory: Record<string, number>\n  recentlyCreated: number\n  recentlyUpdated: number\n}\n\nexport function Dashboard() {\n  const [stats, setStats] = useState<PromptStats | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const data = await getPromptStats()\n        setStats(data)\n      } catch (error) {\n        console.error(\"Error fetching stats:\", error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStats()\n  }, [])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    )\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"text-center p-8\">\n        <p className=\"text-muted-foreground\">Failed to load statistics.</p>\n      </div>\n    )\n  }\n\n  // Prepare data for charts\n  const categoryData = Object.entries(stats.byCategory).map(([name, value]) => ({\n    name,\n    value,\n  }))\n\n  const summaryData = [\n    { name: \"Total Prompts\", value: stats.total },\n    { name: \"Recently Created\", value: stats.recentlyCreated },\n    { name: \"Recently Updated\", value: stats.recentlyUpdated },\n  ]\n\n  // Colors for pie chart\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884D8\", \"#82CA9D\"]\n\n  // Enhance dashboard responsiveness\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-2xl\">Total Prompts</CardTitle>\n            <CardDescription>All prompts in the database</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold\">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-2xl\">Recently Created</CardTitle>\n            <CardDescription>Prompts created in the last 7 days</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold\">{stats.recentlyCreated}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-2xl\">Categories</CardTitle>\n            <CardDescription>Total number of categories</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold\">{Object.keys(stats.byCategory).length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"categories\" className=\"w-full\">\n        <TabsList className=\"w-full grid grid-cols-2\">\n          <TabsTrigger value=\"categories\">Categories</TabsTrigger>\n          <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"categories\" className=\"pt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Prompts by Category</CardTitle>\n              <CardDescription>Distribution of prompts across categories</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[50vh] sm:h-80\">\n                {categoryData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={categoryData} layout=\"vertical\" margin={{ left: 20, right: 20 }}>\n                      <XAxis type=\"number\" />\n                      <YAxis type=\"category\" dataKey=\"name\" width={100} />\n                      <Tooltip />\n                      <Bar dataKey=\"value\" fill=\"#8884d8\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex justify-center items-center h-full\">\n                    <p className=\"text-muted-foreground\">No category data available</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"summary\" className=\"pt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Prompt Summary</CardTitle>\n              <CardDescription>Overview of prompt statistics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[50vh] sm:h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={categoryData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      nameKey=\"name\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {categoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/date-range-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/delete-prompt-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/edit-prompt-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/enhanced-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/export-prompts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/favorites-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/file-search-setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/file-upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/functions-view.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/import-prompts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/keyboard-shortcuts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/app-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/global-footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/global-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/page-container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/page-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/layout/section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/legal-prompts-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCategories' is assigned a value but never used.","line":78,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":35},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handlePageChange' and 'toggleFavoritesFilter'. Either include them or remove the dependency array.","line":401,"column":6,"nodeType":"ArrayExpression","endLine":401,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, totalPages, showFavoritesOnly, toggleFavoritesFilter, handlePageChange]","fix":{"range":[12938,12982],"text":"[currentPage, totalPages, showFavoritesOnly, toggleFavoritesFilter, handlePageChange]"}}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":2,"message":"Do not use an `<a>` element to navigate to `/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":420,"column":11,"nodeType":"JSXOpeningElement","endLine":420,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { useState, useTransition, useEffect } from \"react\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport type { LegalPrompt } from \"@/app/actions\"\nimport { getLegalPrompts, duplicateLegalPrompt, deleteLegalPrompt } from \"@/app/actions\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { AdvancedSearch, type SearchFilters } from \"./advanced-search\"\nimport { BulkActions } from \"./bulk-actions\"\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ListFilter,\n  Check,\n  Loader2,\n  LayoutGrid,\n  List,\n  Star,\n  StarOff,\n  Keyboard,\n} from \"lucide-react\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { PromptCard } from \"./prompt-card\"\nimport { PromptListItem } from \"./prompt-list-item\"\nimport { Section } from \"./layout/section\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { PromptListSkeleton } from \"./prompt-list-skeleton\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\n\n// Import the useFavorites hook\nimport { useFavorites } from \"@/components/favorites-provider\"\n\ninterface LegalPromptsListProps {\n  initialPrompts: LegalPrompt[]\n  initialCategories: string[]\n  initialTotal: number\n  initialFilters?: {\n    category?: string\n    search?: string\n  }\n}\n\ntype SortOption = \"createdAt-desc\" | \"createdAt-asc\" | \"name-asc\" | \"name-desc\" | \"category-asc\" | \"favorites\"\ntype ViewMode = \"grid\" | \"list\"\n\nexport function LegalPromptsList({\n  initialPrompts,\n  initialCategories,\n  initialTotal,\n  initialFilters,\n}: LegalPromptsListProps) {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const [prompts, setPrompts] = useState<LegalPrompt[]>(initialPrompts)\n  const [total, setTotal] = useState<number>(initialTotal)\n  const [categories, setCategories] = useState<string[]>(initialCategories)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [selectedPrompts, setSelectedPrompts] = useState<number[]>([])\n  const [sortOption, setSortOption] = useState<SortOption>(\"createdAt-desc\")\n  const [viewMode, setViewMode] = useState<ViewMode>(\"grid\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [isPending, startTransition] = useTransition()\n  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false)\n  const [promptToDelete, setPromptToDelete] = useState<number | null>(null)\n  const [showKeyboardShortcuts, setShowKeyboardShortcuts] = useState(false)\n  const promptsPerPage = viewMode === \"grid\" ? 6 : 10\n\n  // Add the useFavorites hook inside the component\n  const { favorites } = useFavorites()\n\n  // Calculate pagination\n  const totalPages = Math.ceil(total / promptsPerPage)\n\n  // Apply search filters\n  const handleSearch = (filters: SearchFilters) => {\n    setIsLoading(true)\n    setError(null)\n\n    startTransition(async () => {\n      try {\n        // Map the sort option to the format expected by the API\n        let sortBy: string\n        switch (filters.sortBy) {\n          case \"createdAt-asc\":\n            sortBy = '\"createdAt\" ASC'\n            break\n          case \"name-asc\":\n            sortBy = \"name ASC\"\n            break\n          case \"name-desc\":\n            sortBy = \"name DESC\"\n            break\n          case \"category-asc\":\n            sortBy = \"category ASC\"\n            break\n          case \"favorites\":\n            sortBy = '\"createdAt\" DESC' // Default sort for favorites\n            break\n          default:\n            sortBy = '\"createdAt\" DESC'\n        }\n\n        // Fetch data from the server\n        const result = await getLegalPrompts({\n          search: filters.term,\n          category: filters.categories,\n          dateRange: {\n            from: filters.dateRange.from?.toISOString(),\n            to: filters.dateRange.to?.toISOString(),\n          },\n          includeSystemMessages: filters.includeSystemMessages,\n          sortBy,\n          limit: promptsPerPage,\n          offset: 0, // Reset to first page\n        })\n\n        let filteredPrompts = result.prompts\n        let filteredTotal = result.total\n\n        // If showing favorites only, filter the results client-side\n        if (showFavoritesOnly) {\n          filteredPrompts = filteredPrompts.filter((prompt) => favorites.includes(prompt.id))\n          filteredTotal = filteredPrompts.length\n        }\n\n        // If sorting by favorites, bring favorites to the top\n        if (filters.sortBy === \"favorites\") {\n          filteredPrompts.sort((a, b) => {\n            const aIsFavorite = favorites.includes(a.id) ? 1 : 0\n            const bIsFavorite = favorites.includes(b.id) ? 1 : 0\n            return bIsFavorite - aIsFavorite || new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          })\n        }\n\n        setPrompts(filteredPrompts)\n        setTotal(filteredTotal)\n        setCurrentPage(1) // Reset to first page when filters change\n\n        // Update URL with search params\n        const params = new URLSearchParams()\n        if (filters.term) params.set(\"search\", filters.term)\n        if (filters.categories.length === 1) params.set(\"category\", filters.categories[0])\n        if (filters.sortBy !== \"createdAt-desc\") params.set(\"sort\", filters.sortBy)\n        if (showFavoritesOnly) params.set(\"favorites\", \"true\")\n\n        // Update the URL without refreshing the page\n        const newUrl = `/?${params.toString()}`\n        router.push(newUrl, { scroll: false })\n      } catch (err) {\n        console.error(\"Error fetching prompts:\", err)\n        setError(\"Failed to fetch prompts. Please try again.\")\n      } finally {\n        setIsLoading(false)\n      }\n    })\n  }\n\n  // Handle pagination\n  const handlePageChange = (page: number) => {\n    if (page === currentPage) return\n\n    setIsLoading(true)\n    setError(null)\n\n    startTransition(async () => {\n      try {\n        // Map the sort option to the format expected by the API\n        let sortBy: string\n        switch (sortOption) {\n          case \"createdAt-asc\":\n            sortBy = '\"createdAt\" ASC'\n            break\n          case \"name-asc\":\n            sortBy = \"name ASC\"\n            break\n          case \"name-desc\":\n            sortBy = \"name DESC\"\n            break\n          case \"category-asc\":\n            sortBy = \"category ASC\"\n            break\n          case \"favorites\":\n            sortBy = '\"createdAt\" DESC' // Default sort for favorites\n            break\n          default:\n            sortBy = '\"createdAt\" DESC'\n        }\n\n        // Get current search params\n        const term = searchParams.get(\"search\") || \"\"\n        const category = searchParams.get(\"category\")\n\n        // Fetch data for the new page\n        const result = await getLegalPrompts({\n          search: term,\n          category: category ? [category] : undefined,\n          sortBy,\n          limit: promptsPerPage,\n          offset: (page - 1) * promptsPerPage,\n        })\n\n        let filteredPrompts = result.prompts\n\n        // If showing favorites only, filter the results client-side\n        if (showFavoritesOnly) {\n          filteredPrompts = filteredPrompts.filter((prompt) => favorites.includes(prompt.id))\n        }\n\n        // If sorting by favorites, bring favorites to the top\n        if (sortOption === \"favorites\") {\n          filteredPrompts.sort((a, b) => {\n            const aIsFavorite = favorites.includes(a.id) ? 1 : 0\n            const bIsFavorite = favorites.includes(b.id) ? 1 : 0\n            return bIsFavorite - aIsFavorite || new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          })\n        }\n\n        setPrompts(filteredPrompts)\n        setCurrentPage(page)\n      } catch (err) {\n        console.error(\"Error fetching prompts:\", err)\n        setError(\"Failed to fetch prompts. Please try again.\")\n      } finally {\n        setIsLoading(false)\n      }\n    })\n  }\n\n  // Handle prompt selection\n  const togglePromptSelection = (id: number) => {\n    setSelectedPrompts((prev) => (prev.includes(id) ? prev.filter((promptId) => promptId !== id) : [...prev, id]))\n  }\n\n  const toggleAllPrompts = () => {\n    if (selectedPrompts.length === prompts.length) {\n      setSelectedPrompts([])\n    } else {\n      setSelectedPrompts(prompts.map((prompt) => prompt.id))\n    }\n  }\n\n  const clearSelection = () => {\n    setSelectedPrompts([])\n  }\n\n  // Handle favorites\n  const handleFavoriteToggle = (id: number, isFavorite: boolean) => {\n    // In a real app, this would call an API to update the favorite status\n    // For now, we'll just update the local state\n    setPrompts((prevPrompts) => prevPrompts.map((prompt) => (prompt.id === id ? { ...prompt, isFavorite } : prompt)))\n  }\n\n  // Update the toggleFavoritesFilter function to filter client-side when needed\n  const toggleFavoritesFilter = () => {\n    const newState = !showFavoritesOnly\n    setShowFavoritesOnly(newState)\n\n    // If we're showing favorites, filter the prompts client-side\n    if (newState) {\n      // Filter the current prompts to only show favorites\n      const filteredPrompts = prompts.filter((prompt) => favorites.includes(prompt.id))\n      setPrompts(filteredPrompts)\n      setTotal(filteredPrompts.length)\n    } else {\n      // If turning off favorites filter, refresh the list with the original filters\n      handleSearch({\n        term: searchParams.get(\"search\") || \"\",\n        categories: searchParams.get(\"category\") ? [searchParams.get(\"category\")!] : [],\n        dateRange: { from: undefined, to: undefined },\n        includeSystemMessages: true,\n        sortBy: sortOption,\n      })\n    }\n\n    toast({\n      title: newState ? \"Showing favorites only\" : \"Showing all prompts\",\n      duration: 3000,\n    })\n  }\n\n  // Handle duplicate\n  const handleDuplicate = async (id: number) => {\n    try {\n      const result = await duplicateLegalPrompt(id)\n      if (result.success) {\n        // Refresh the list\n        handleSearch({\n          term: searchParams.get(\"search\") || \"\",\n          categories: searchParams.get(\"category\") ? [searchParams.get(\"category\")!] : [],\n          dateRange: { from: undefined, to: undefined },\n          includeSystemMessages: true,\n          sortBy: sortOption,\n        })\n      }\n    } catch (error) {\n      console.error(\"Error duplicating prompt:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to duplicate prompt\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  // Handle delete\n  const handleDelete = async () => {\n    if (promptToDelete === null) return\n\n    try {\n      const result = await deleteLegalPrompt(promptToDelete)\n      if (result.success) {\n        toast({\n          title: \"Prompt deleted\",\n          description: \"The prompt has been successfully deleted.\",\n        })\n\n        // Remove from local state\n        setPrompts((prevPrompts) => prevPrompts.filter((prompt) => prompt.id !== promptToDelete))\n        setTotal((prev) => prev - 1)\n\n        // If we deleted the last prompt on the page, go to the previous page\n        if (prompts.length === 1 && currentPage > 1) {\n          handlePageChange(currentPage - 1)\n        }\n      }\n    } catch (error) {\n      console.error(\"Error deleting prompt:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prompt\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setPromptToDelete(null)\n    }\n  }\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Don't trigger shortcuts when typing in input fields\n      if (\n        e.target instanceof HTMLInputElement ||\n        e.target instanceof HTMLTextAreaElement ||\n        e.target instanceof HTMLSelectElement\n      ) {\n        return\n      }\n\n      switch (e.key) {\n        case \"g\":\n          setViewMode(\"grid\")\n          break\n        case \"l\":\n          setViewMode(\"list\")\n          break\n        case \"f\":\n          toggleFavoritesFilter()\n          break\n        case \"?\":\n          setShowKeyboardShortcuts(true)\n          break\n        case \"ArrowLeft\":\n          if (currentPage > 1) {\n            handlePageChange(currentPage - 1)\n          }\n          break\n        case \"ArrowRight\":\n          if (currentPage < totalPages) {\n            handlePageChange(currentPage + 1)\n          }\n          break\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [currentPage, totalPages, showFavoritesOnly])\n\n  // Calculate pagination\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (initialPrompts.length === 0 && total === 0) {\n    return (\n      <div className=\"text-center p-8 bg-muted/30 rounded-lg\">\n        <h3 className=\"text-lg font-medium mb-2\">No prompts found</h3>\n        <p className=\"text-muted-foreground mb-4\">Create your first prompt to get started.</p>\n        <Button asChild>\n          <a href=\"/?tab=create\">Create a Prompt</a>\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Section contentClassName=\"space-y-6\">\n        <AdvancedSearch categories={categories} onSearch={handleSearch} initialFilters={initialFilters} />\n\n        <BulkActions selectedPrompts={selectedPrompts} categories={categories} onClearSelection={clearSelection} />\n\n        {isLoading ? (\n          <PromptListSkeleton viewMode={viewMode} />\n        ) : prompts.length === 0 ? (\n          <div className=\"text-center p-8 bg-muted/30 rounded-lg border border-border/50\">\n            <h3 className=\"text-lg font-medium mb-2\">No matching prompts</h3>\n            <p className=\"text-muted-foreground mb-4\">Try adjusting your search filters.</p>\n            <Button\n              variant=\"outline\"\n              onClick={() =>\n                handleSearch({\n                  term: \"\",\n                  categories: [],\n                  dateRange: { from: undefined, to: undefined },\n                  includeSystemMessages: true,\n                  sortBy: \"createdAt-desc\",\n                })\n              }\n            >\n              Clear all filters\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-4 gap-3\">\n              <div className=\"flex items-center\">\n                <Checkbox\n                  id=\"select-all\"\n                  checked={selectedPrompts.length === prompts.length && prompts.length > 0}\n                  onCheckedChange={toggleAllPrompts}\n                  className=\"mr-2\"\n                />\n                <label htmlFor=\"select-all\" className=\"text-sm\">\n                  Select all on this page\n                </label>\n              </div>\n\n              <div className=\"flex flex-wrap items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={cn(\n                    \"gap-1\",\n                    showFavoritesOnly &&\n                      \"bg-amber-100/50 text-amber-700 border-amber-200 hover:bg-amber-100 dark:bg-amber-900/20 dark:border-amber-800/30 dark:text-amber-500\",\n                  )}\n                  onClick={toggleFavoritesFilter}\n                >\n                  {showFavoritesOnly ? (\n                    <>\n                      <StarOff className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">All Prompts</span>\n                    </>\n                  ) : (\n                    <>\n                      <Star className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Favorites</span>\n                    </>\n                  )}\n                </Button>\n\n                <div className=\"flex border rounded-md overflow-hidden\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={cn(\"rounded-none px-2 h-8\", viewMode === \"grid\" ? \"bg-muted\" : \"hover:bg-transparent\")}\n                    onClick={() => setViewMode(\"grid\")}\n                  >\n                    <LayoutGrid className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Grid view</span>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={cn(\"rounded-none px-2 h-8\", viewMode === \"list\" ? \"bg-muted\" : \"hover:bg-transparent\")}\n                    onClick={() => setViewMode(\"list\")}\n                  >\n                    <List className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">List view</span>\n                  </Button>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-8 w-8 p-0\"\n                  onClick={() => setShowKeyboardShortcuts(true)}\n                >\n                  <Keyboard className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Keyboard shortcuts</span>\n                </Button>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n                      <ListFilter className=\"h-4 w-4\" />\n                      <span className=\"hidden sm:inline\">Sort</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>Sort By</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => setSortOption(\"favorites\")}>\n                      {sortOption === \"favorites\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Favorites First\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortOption(\"createdAt-desc\")}>\n                      {sortOption === \"createdAt-desc\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Newest First\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortOption(\"createdAt-asc\")}>\n                      {sortOption === \"createdAt-asc\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Oldest First\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortOption(\"name-asc\")}>\n                      {sortOption === \"name-asc\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Name (A-Z)\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortOption(\"name-desc\")}>\n                      {sortOption === \"name-desc\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Name (Z-A)\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setSortOption(\"category-asc\")}>\n                      {sortOption === \"category-asc\" && <Check className=\"h-4 w-4 mr-2\" />}\n                      Category\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                <span className=\"text-xs sm:text-sm text-muted-foreground hidden sm:inline ml-2\">\n                  {total} {total === 1 ? \"prompt\" : \"prompts\"}\n                </span>\n              </div>\n            </div>\n\n            <AnimatePresence mode=\"wait\">\n              {viewMode === \"grid\" ? (\n                <motion.div\n                  key={`grid-${sortOption}-${currentPage}-${showFavoritesOnly}`}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"grid gap-4 sm:gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\"\n                >\n                  {prompts.map((prompt) => (\n                    <motion.div\n                      key={prompt.id}\n                      layout\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      transition={{ duration: 0.2 }}\n                      className=\"hover-lift\"\n                    >\n                      <PromptCard\n                        prompt={prompt}\n                        isSelected={selectedPrompts.includes(prompt.id)}\n                        onSelect={togglePromptSelection}\n                        onFavorite={handleFavoriteToggle}\n                        onDuplicate={handleDuplicate}\n                        onDelete={(id) => setPromptToDelete(id)}\n                      />\n                    </motion.div>\n                  ))}\n                </motion.div>\n              ) : (\n                <motion.div\n                  key={`list-${sortOption}-${currentPage}-${showFavoritesOnly}`}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"flex flex-col gap-3\"\n                >\n                  {prompts.map((prompt) => (\n                    <motion.div\n                      key={prompt.id}\n                      layout\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      transition={{ duration: 0.2 }}\n                      className=\"hover-lift\"\n                    >\n                      <PromptListItem\n                        prompt={prompt}\n                        isSelected={selectedPrompts.includes(prompt.id)}\n                        onSelect={togglePromptSelection}\n                        onFavorite={handleFavoriteToggle}\n                        onDuplicate={handleDuplicate}\n                        onDelete={(id) => setPromptToDelete(id)}\n                      />\n                    </motion.div>\n                  ))}\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex justify-center mt-8\">\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || isPending}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: Math.min(5, totalPages) }).map((_, i) => {\n                      // Calculate page numbers to show (centered around current page)\n                      let pageNum = i + 1\n                      if (totalPages > 5) {\n                        if (currentPage > 3) {\n                          pageNum = currentPage - 3 + i\n                        }\n                        if (currentPage > totalPages - 2) {\n                          pageNum = totalPages - 4 + i\n                        }\n                      }\n\n                      return pageNum <= totalPages ? (\n                        <Button\n                          key={pageNum}\n                          variant={currentPage === pageNum ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => handlePageChange(pageNum)}\n                          disabled={isPending}\n                          className=\"w-8 h-8 p-0\"\n                        >\n                          {pageNum}\n                        </Button>\n                      ) : null\n                    })}\n                  </div>\n\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || isPending}\n                  >\n                    {isPending ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <ChevronRight className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </Section>\n\n      {/* Delete confirmation dialog */}\n      <AlertDialog open={promptToDelete !== null} onOpenChange={(open) => !open && setPromptToDelete(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the prompt.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete} className=\"bg-destructive text-destructive-foreground\">\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Keyboard shortcuts dialog */}\n      <Dialog open={showKeyboardShortcuts} onOpenChange={setShowKeyboardShortcuts}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Keyboard Shortcuts</DialogTitle>\n            <DialogDescription>\n              Use these keyboard shortcuts to navigate and manage your prompts more efficiently.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"grid grid-cols-2 gap-4 py-4\">\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">g</kbd>\n              <span>Grid view</span>\n            </div>\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">l</kbd>\n              <span>List view</span>\n            </div>\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">f</kbd>\n              <span>Toggle favorites</span>\n            </div>\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">?</kbd>\n              <span>Show shortcuts</span>\n            </div>\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">←</kbd>\n              <span>Previous page</span>\n            </div>\n            <div className=\"flex items-center\">\n              <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-semibold mr-2\">→</kbd>\n              <span>Next page</span>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/message.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bot' is defined but never used.","line":5,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/onboarding-tour.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/panel-config.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-actions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":25,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":41,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":100,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2973,3029],"text":"\n              This will permanently delete the prompt &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2973,3029],"text":"\n              This will permanently delete the prompt &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2973,3029],"text":"\n              This will permanently delete the prompt &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2973,3029],"text":"\n              This will permanently delete the prompt &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":100,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3041,3086],"text":"&quot;. This action cannot be undone.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3041,3086],"text":"&ldquo;. This action cannot be undone.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3041,3086],"text":"&#34;. This action cannot be undone.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3041,3086],"text":"&rdquo;. This action cannot be undone.\n            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { MoreHorizontal, Copy, Trash } from \"lucide-react\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\nimport { useRouter } from \"next/navigation\"\nimport { toast } from \"@/components/ui/use-toast\"\n\ninterface PromptActionsProps {\n  promptId: number\n  promptName: string\n}\n\nexport function PromptActions({ promptId, promptName }: PromptActionsProps) {\n  const router = useRouter()\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  const onDelete = async () => {\n    setIsDeleting(true)\n    try {\n      // This would be a server action to delete the prompt\n      // await deletePrompt(promptId)\n      toast({\n        title: \"Prompt deleted\",\n        description: `${promptName} has been deleted.`,\n      })\n      router.push(\"/prompts\")\n      router.refresh()\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete prompt. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsDeleting(false)\n      setShowDeleteDialog(false)\n    }\n  }\n\n  const onDuplicate = async () => {\n    try {\n      // This would be a server action to duplicate the prompt\n      // await duplicatePrompt(promptId)\n      toast({\n        title: \"Prompt duplicated\",\n        description: `A copy of ${promptName} has been created.`,\n      })\n      router.refresh()\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to duplicate prompt. Please try again.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" size=\"icon\">\n            <MoreHorizontal className=\"h-4 w-4\" />\n            <span className=\"sr-only\">More options</span>\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={onDuplicate}>\n            <Copy className=\"mr-2 h-4 w-4\" />\n            Duplicate\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => setShowDeleteDialog(true)}\n            className=\"text-destructive focus:text-destructive\"\n          >\n            <Trash className=\"mr-2 h-4 w-4\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete the prompt \"{promptName}\". This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={onDelete}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              disabled={isDeleting}\n            >\n              {isDeleting ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-analytics.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":124,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3241,3285],"text":"This prompt doesn&apos;t have any usage data yet."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3241,3285],"text":"This prompt doesn&lsquo;t have any usage data yet."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3241,3285],"text":"This prompt doesn&#39;t have any usage data yet."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3241,3285],"text":"This prompt doesn&rsquo;t have any usage data yet."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n} from \"recharts\"\nimport { TrendingUp, BarChart2, PieChartIcon, LineChartIcon } from \"lucide-react\"\nimport { getPromptAnalytics } from \"@/app/actions\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ninterface PromptAnalyticsProps {\n  promptId: number\n}\n\ninterface AnalyticsData {\n  usageOverTime: {\n    date: string\n    count: number\n  }[]\n  responseTimeAvg: number\n  usageCount: number\n  completionRate: number\n  usageByTime: {\n    hour: number\n    count: number\n  }[]\n  usageByDay: {\n    day: string\n    count: number\n  }[]\n  variableUsage: {\n    variable: string\n    count: number\n    percentage: number\n  }[]\n}\n\nexport function PromptAnalytics({ promptId }: PromptAnalyticsProps) {\n  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [timeRange, setTimeRange] = useState<\"7d\" | \"30d\" | \"90d\" | \"1y\">(\"30d\")\n\n  const COLORS = [\"#4f46e5\", \"#0ea5e9\", \"#10b981\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\"]\n\n  useEffect(() => {\n    const loadAnalytics = async () => {\n      setIsLoading(true)\n      try {\n        const result = await getPromptAnalytics(promptId, timeRange)\n        if (result.success) {\n          setAnalytics(result.data)\n        } else {\n          setError(result.error || \"Failed to load analytics\")\n        }\n      } catch (error) {\n        console.error(\"Error loading analytics:\", error)\n        setError(\"Failed to load analytics\")\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    loadAnalytics()\n  }, [promptId, timeRange])\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-8 w-64\" />\n          <Skeleton className=\"h-4 w-48\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-24 w-full\" />\n            ))}\n          </div>\n          <Skeleton className=\"h-64 w-full\" />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Prompt Analytics</CardTitle>\n          <CardDescription>Error loading analytics</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive\">{error}</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!analytics) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Prompt Analytics</CardTitle>\n          <CardDescription>No analytics data available</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">This prompt doesn't have any usage data yet.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <div>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-primary\" />\n            Prompt Analytics\n          </CardTitle>\n          <CardDescription>Usage statistics and performance metrics</CardDescription>\n        </div>\n\n        <Select value={timeRange} onValueChange={(value) => setTimeRange(value as any)}>\n          <SelectTrigger className=\"w-[120px]\">\n            <SelectValue placeholder=\"Time Range\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7d\">Last 7 days</SelectItem>\n            <SelectItem value=\"30d\">Last 30 days</SelectItem>\n            <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            <SelectItem value=\"1y\">Last year</SelectItem>\n          </SelectContent>\n        </Select>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Usage</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold\">{analytics.usageCount}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">Total times this prompt has been used</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Avg. Response Time</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold\">{analytics.responseTimeAvg}ms</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">Average AI response generation time</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold\">{analytics.completionRate}%</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">Percentage of successful completions</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"usage\">\n          <TabsList>\n            <TabsTrigger value=\"usage\" className=\"gap-1\">\n              <LineChartIcon className=\"h-4 w-4\" />\n              Usage Trends\n            </TabsTrigger>\n            <TabsTrigger value=\"time\" className=\"gap-1\">\n              <BarChart2 className=\"h-4 w-4\" />\n              Time Analysis\n            </TabsTrigger>\n            <TabsTrigger value=\"variables\" className=\"gap-1\">\n              <PieChartIcon className=\"h-4 w-4\" />\n              Variables\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"usage\" className=\"pt-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Usage Over Time</CardTitle>\n                <CardDescription>Number of times this prompt has been used over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={analytics.usageOverTime} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line\n                        type=\"monotone\"\n                        dataKey=\"count\"\n                        stroke=\"#4f46e5\"\n                        strokeWidth={2}\n                        activeDot={{ r: 8 }}\n                        name=\"Usage Count\"\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"time\" className=\"pt-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Usage by Hour of Day</CardTitle>\n                <CardDescription>When this prompt is most frequently used</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={analytics.usageByTime} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"hour\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"count\" fill=\"#4f46e5\" name=\"Usage Count\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Usage by Day of Week</CardTitle>\n                <CardDescription>Which days this prompt is used most</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={analytics.usageByDay} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"count\" fill=\"#0ea5e9\" name=\"Usage Count\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"variables\" className=\"pt-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base\">Variable Usage</CardTitle>\n                <CardDescription>How frequently each variable is used</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={analytics.variableUsage}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          labelLine={false}\n                          outerRadius={80}\n                          fill=\"#8884d8\"\n                          dataKey=\"count\"\n                          nameKey=\"variable\"\n                          label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                        >\n                          {analytics.variableUsage.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">Variable Details</h4>\n                    <div className=\"space-y-2\">\n                      {analytics.variableUsage.map((variable, index) => (\n                        <div\n                          key={variable.variable}\n                          className=\"flex justify-between items-center p-2 bg-muted/50 rounded-md\"\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            <div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                            />\n                            <span className=\"font-medium\">{variable.variable}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\">{variable.count} uses</Badge>\n                            <Badge>{variable.percentage}%</Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-card-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-detail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'favorites' is assigned a value but never used.","line":28,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptTags' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":59,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { Star, StarOff, Copy, Trash, Edit, Clock, Tag } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { useFavorites } from \"@/components/favorites-provider\"\nimport { useTags } from \"@/components/tags-provider\"\nimport { TagsInput } from \"@/components/tags-input\"\nimport { type LegalPrompt, duplicateLegalPrompt, deleteLegalPrompt } from \"@/app/actions\"\nimport { useToast } from \"@/components/ui/use-toast\"\nimport { useRouter } from \"next/navigation\"\nimport { PromptVersionHistory } from \"@/components/prompt-version-history\"\nimport { PromptTestInterface } from \"@/components/prompt-test-interface\"\nimport { PromptAnalytics } from \"@/components/prompt-analytics\"\n\ninterface PromptDetailProps {\n  prompt: LegalPrompt\n}\n\nexport function PromptDetail({ prompt }: PromptDetailProps) {\n  const { id, name, category, prompt: promptText, systemMessage, createdAt } = prompt\n  const { toast } = useToast()\n  const router = useRouter()\n  const { favorites, toggleFavorite, isFavorite } = useFavorites()\n  const { getPromptTags } = useTags()\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isDuplicating, setIsDuplicating] = useState(false)\n\n  const promptTags = getPromptTags(id)\n  const isFavorited = isFavorite(id)\n\n  // Extract variables from the prompt\n  const variables = promptText.match(/\\{\\{([^}]+)\\}\\}/g) || []\n  const uniqueVariables = [...new Set(variables.map((v) => v.slice(2, -2)))]\n\n  const handleDuplicate = async () => {\n    setIsDuplicating(true)\n    try {\n      const result = await duplicateLegalPrompt(id)\n      if (result.success) {\n        toast({\n          title: \"Prompt duplicated\",\n          description: \"The prompt has been duplicated successfully.\",\n        })\n        if (result.data) {\n          router.push(`/prompts/${result.data.id}`)\n        }\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || \"Failed to duplicate prompt.\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsDuplicating(false)\n    }\n  }\n\n  const handleDelete = async () => {\n    setIsDeleting(true)\n    try {\n      const result = await deleteLegalPrompt(id)\n      if (result.success) {\n        toast({\n          title: \"Prompt deleted\",\n          description: \"The prompt has been deleted successfully.\",\n        })\n        router.push(\"/\")\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || \"Failed to delete prompt.\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsDeleting(false)\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    })\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">{name}</h1>\n          <div className=\"flex items-center gap-2 mt-1\">\n            <Badge variant=\"outline\">{category}</Badge>\n            <span className=\"text-sm text-muted-foreground\">Created on {formatDate(createdAt)}</span>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => toggleFavorite(id)}\n            aria-label={isFavorited ? \"Remove from favorites\" : \"Add to favorites\"}\n          >\n            {isFavorited ? (\n              <Star className=\"h-5 w-5 fill-yellow-400 text-yellow-400\" />\n            ) : (\n              <StarOff className=\"h-5 w-5\" />\n            )}\n          </Button>\n          <Button variant=\"outline\" onClick={handleDuplicate} disabled={isDuplicating}>\n            <Copy className=\"mr-2 h-4 w-4\" />\n            Duplicate\n          </Button>\n          <Button variant=\"outline\" asChild>\n            <Link href={`/prompts/${id}/edit`}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Edit\n            </Link>\n          </Button>\n          <Button variant=\"destructive\" onClick={handleDelete} disabled={isDeleting}>\n            <Trash className=\"mr-2 h-4 w-4\" />\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex items-start gap-4\">\n        <div className=\"w-3/4 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Prompt</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <pre className=\"whitespace-pre-wrap bg-muted p-4 rounded-md text-sm\">{promptText}</pre>\n            </CardContent>\n          </Card>\n\n          {systemMessage && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">System Message</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <pre className=\"whitespace-pre-wrap bg-muted p-4 rounded-md text-sm\">{systemMessage}</pre>\n              </CardContent>\n            </Card>\n          )}\n\n          <Tabs defaultValue=\"test\">\n            <TabsList className=\"grid grid-cols-3 w-full\">\n              <TabsTrigger value=\"test\">Test Prompt</TabsTrigger>\n              <TabsTrigger value=\"versions\">Version History</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"test\" className=\"mt-4\">\n              <PromptTestInterface prompt={prompt} />\n            </TabsContent>\n            <TabsContent value=\"versions\" className=\"mt-4\">\n              <PromptVersionHistory promptId={id} />\n            </TabsContent>\n            <TabsContent value=\"analytics\" className=\"mt-4\">\n              <PromptAnalytics promptId={id} />\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        <div className=\"w-1/4 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <Tag className=\"mr-2 h-4 w-4\" />\n                Tags\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <TagsInput promptId={id} />\n            </CardContent>\n          </Card>\n\n          {uniqueVariables.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Variables</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {uniqueVariables.map((variable) => (\n                    <Badge key={variable} variant=\"outline\" className=\"mr-2\">\n                      {variable}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <Clock className=\"mr-2 h-4 w-4\" />\n                History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm\">\n                <p>Created: {formatDate(createdAt)}</p>\n                <p className=\"mt-1\">Last modified: {formatDate(createdAt)}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-filters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateRange' is assigned a value but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleDateRangeChange' is assigned a value but never used.","line":84,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Tag, X } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { useTags } from \"@/components/tags-provider\"\n\ninterface PromptFiltersProps {\n  selectedCategories: string[]\n  onCategoryChange: (categories: string[]) => void\n  selectedTags: string[]\n  onTagChange: (tags: string[]) => void\n  categories: string[]\n  filters: any // TODO: Define type\n  onFilterChange: (filters: any) => void // TODO: Define type\n}\n\nexport function PromptFilters({\n  selectedCategories,\n  onCategoryChange,\n  selectedTags,\n  onTagChange,\n  categories,\n  filters,\n  onFilterChange,\n}: PromptFiltersProps) {\n  const { allTags } = useTags()\n  const [localSelectedCategories, setLocalSelectedCategories] = useState<string[]>(selectedCategories)\n  const [localSelectedTags, setLocalSelectedTags] = useState<string[]>(selectedTags)\n  const [selectedCategoriesState, setSelectedCategories] = useState<string[]>(selectedCategories)\n  const [dateRange, setDateRange] = useState<DateRange | undefined>(undefined)\n\n  useEffect(() => {\n    setLocalSelectedCategories(selectedCategories)\n  }, [selectedCategories])\n\n  useEffect(() => {\n    setLocalSelectedTags(selectedTags)\n  }, [selectedTags])\n\n  const handleCategoryChange = (category: string) => {\n    const newCategories = selectedCategoriesState.includes(category)\n      ? selectedCategoriesState.filter((c) => c !== category)\n      : [...selectedCategoriesState, category]\n\n    setSelectedCategories(newCategories)\n\n    // Make sure we're passing the updated categories to the parent component\n    onFilterChange({\n      ...filters,\n      category: newCategories.length > 0 ? newCategories : undefined,\n    })\n  }\n\n  const handleTagChange = (tag: string, checked: boolean) => {\n    const updatedTags = checked ? [...localSelectedTags, tag] : localSelectedTags.filter((t) => t !== tag)\n\n    setLocalSelectedTags(updatedTags)\n    onTagChange(updatedTags)\n  }\n\n  const clearCategoryFilter = (category: string) => {\n    const updatedCategories = localSelectedCategories.filter((c) => c !== category)\n    setLocalSelectedCategories(updatedCategories)\n    onCategoryChange(updatedCategories)\n  }\n\n  const clearTagFilter = (tag: string) => {\n    const updatedTags = localSelectedTags.filter((t) => t !== tag)\n    setLocalSelectedTags(updatedTags)\n    onTagChange(updatedTags)\n  }\n\n  const clearAllFilters = () => {\n    setLocalSelectedCategories([])\n    setLocalSelectedTags([])\n    onCategoryChange([])\n    onTagChange([])\n  }\n\n  const handleDateRangeChange = (range: DateRange | undefined) => {\n    setDateRange(range)\n\n    // Format dates as ISO strings for the database query\n    const formattedRange = range\n      ? {\n          from: range.from ? range.from.toISOString() : undefined,\n          to: range.to ? range.to.toISOString() : undefined,\n        }\n      : undefined\n\n    // Make sure we're passing the updated date range to the parent component\n    onFilterChange({\n      ...filters,\n      dateRange: formattedRange,\n    })\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-wrap gap-2\">\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\">\n              Categories\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-56\" align=\"start\">\n            <div className=\"space-y-2\">\n              {categories.map((category) => (\n                <div key={category} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`category-${category}`}\n                    checked={localSelectedCategories.includes(category)}\n                    onCheckedChange={() => handleCategoryChange(category)}\n                  />\n                  <label\n                    htmlFor={`category-${category}`}\n                    className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    {category}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </PopoverContent>\n        </Popover>\n\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\">\n              <Tag className=\"mr-2 h-4 w-4\" />\n              Tags\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-56\" align=\"start\">\n            <div className=\"space-y-2\">\n              {allTags.map((tag) => (\n                <div key={tag} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`tag-${tag}`}\n                    checked={localSelectedTags.includes(tag)}\n                    onCheckedChange={(checked) => handleTagChange(tag, checked === true)}\n                  />\n                  <label\n                    htmlFor={`tag-${tag}`}\n                    className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                  >\n                    {tag}\n                  </label>\n                </div>\n              ))}\n              {allTags.length === 0 && <p className=\"text-sm text-muted-foreground\">No tags available</p>}\n            </div>\n          </PopoverContent>\n        </Popover>\n\n        {(localSelectedCategories.length > 0 || localSelectedTags.length > 0) && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={clearAllFilters}>\n            Clear all\n          </Button>\n        )}\n      </div>\n\n      {(localSelectedCategories.length > 0 || localSelectedTags.length > 0) && (\n        <div className=\"flex flex-wrap gap-2\">\n          {localSelectedCategories.map((category) => (\n            <Badge key={category} variant=\"secondary\">\n              {category}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-4 w-4 p-0 ml-1\"\n                onClick={() => clearCategoryFilter(category)}\n              >\n                <X className=\"h-3 w-3\" />\n                <span className=\"sr-only\">Remove {category} filter</span>\n              </Button>\n            </Badge>\n          ))}\n\n          {localSelectedTags.map((tag) => (\n            <Badge key={tag} variant=\"secondary\">\n              <Tag className=\"mr-1 h-3 w-3\" />\n              {tag}\n              <Button variant=\"ghost\" size=\"sm\" className=\"h-4 w-4 p-0 ml-1\" onClick={() => clearTagFilter(tag)}>\n                <X className=\"h-3 w-3\" />\n                <span className=\"sr-only\">Remove {tag} filter</span>\n              </Button>\n            </Badge>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\ninterface DateRange {\n  from?: Date\n  to?: Date\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-list-item.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onFavorite' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { formatDistanceToNow } from \"date-fns\"\nimport { Card } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Eye,\n  Pencil,\n  Calendar,\n  Variable,\n  MessageSquare,\n  Star,\n  Copy,\n  MoreHorizontal,\n  Trash2,\n  CopyIcon as Duplicate,\n  ExternalLink,\n  Check,\n} from \"lucide-react\"\nimport type { LegalPrompt } from \"@/app/actions\"\nimport { cn } from \"@/lib/utils\"\nimport { extractVariables } from \"@/lib/validation-utils\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuSeparator,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { useFavorites } from \"@/components/favorites-provider\"\n\ninterface PromptListItemProps {\n  prompt: LegalPrompt\n  isSelected?: boolean\n  onSelect?: (id: number) => void\n  onFavorite?: (id: number, isFavorite: boolean) => void\n  onDuplicate?: (id: number) => void\n  onDelete?: (id: number) => void\n}\n\nexport function PromptListItem({\n  prompt,\n  isSelected = false,\n  onSelect,\n  onFavorite,\n  onDuplicate,\n  onDelete,\n}: PromptListItemProps) {\n  const formattedDate = formatDistanceToNow(new Date(prompt.createdAt), { addSuffix: true })\n  const [copied, setCopied] = useState(false)\n\n  // Extract variables from prompt for display\n  const variables = prompt.variables || extractVariables(prompt.prompt)\n  const hasSystemMessage = !!prompt.systemMessage\n\n  const { isFavorite, toggleFavorite } = useFavorites()\n  const isPromptFavorite = isFavorite(prompt.id)\n\n  const handleFavorite = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    toggleFavorite(prompt.id)\n\n    toast({\n      title: isPromptFavorite ? \"Removed from favorites\" : \"Added to favorites\",\n      description: `\"${prompt.name}\" has been ${isPromptFavorite ? \"removed from\" : \"added to\"} your favorites.`,\n      duration: 3000,\n    })\n  }\n\n  const handleCopyPrompt = (e: React.MouseEvent) => {\n    e.stopPropagation()\n    e.preventDefault()\n    navigator.clipboard.writeText(prompt.prompt)\n    setCopied(true)\n\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Prompt text has been copied to your clipboard.\",\n      duration: 3000,\n    })\n\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  return (\n    <TooltipProvider>\n      <Card\n        className={cn(\n          \"flex flex-col sm:flex-row sm:items-center p-3 sm:p-4 transition-all duration-200 group hover:shadow-md\",\n          \"border-border/60 hover:border-primary/30\",\n          isSelected && \"ring-2 ring-primary/40 border-primary/40 shadow-sm\",\n          isPromptFavorite && \"border-amber-300/50\",\n        )}\n      >\n        {/* Selection checkbox and favorite button in a row on mobile */}\n        <div className=\"flex items-center mb-2 sm:mb-0 sm:mr-4\">\n          {onSelect && (\n            <div className=\"mr-3\">\n              <Checkbox\n                checked={isSelected}\n                onCheckedChange={() => onSelect(prompt.id)}\n                onClick={(e) => e.stopPropagation()}\n                aria-label={`Select ${prompt.name}`}\n                className=\"h-4 w-4 border-2 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\n              />\n            </div>\n          )}\n\n          <button\n            onClick={handleFavorite}\n            className={cn(\n              \"p-1.5 rounded-full transition-colors mr-3\",\n              isPromptFavorite\n                ? \"text-amber-400 bg-amber-100 dark:bg-amber-900/30\"\n                : \"text-muted-foreground/40 hover:text-amber-400 hover:bg-amber-100 dark:hover:bg-amber-900/30\",\n            )}\n            aria-label={isPromptFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\n          >\n            <Star className=\"h-4 w-4\" fill={isPromptFavorite ? \"currentColor\" : \"none\"} />\n          </button>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex flex-wrap gap-2 items-center\">\n            <h3 className=\"font-medium text-base truncate\">{prompt.name}</h3>\n            <Badge\n              variant=\"secondary\"\n              className=\"shrink-0 font-medium text-xs px-2 py-0.5 bg-secondary/70 hover:bg-secondary\"\n            >\n              {prompt.category}\n            </Badge>\n          </div>\n\n          <div className=\"text-sm text-muted-foreground line-clamp-1 mt-2\">{prompt.prompt}</div>\n\n          <div className=\"flex flex-wrap items-center gap-3 mt-3 text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-3 w-3\" />\n              <span>{formattedDate}</span>\n            </div>\n\n            {variables.length > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <Variable className=\"h-3 w-3\" />\n                <span>\n                  {variables.length} {variables.length === 1 ? \"variable\" : \"variables\"}\n                </span>\n              </div>\n            )}\n\n            {hasSystemMessage && (\n              <div className=\"flex items-center gap-1\">\n                <MessageSquare className=\"h-3 w-3\" />\n                <span>System message</span>\n              </div>\n            )}\n\n            {prompt.usageCount !== undefined && prompt.usageCount > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <span>Used {prompt.usageCount} times</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Actions - scrollable container for mobile */}\n        <div className=\"flex items-center gap-1 sm:gap-2 mt-3 sm:mt-0 sm:ml-4 overflow-x-auto pb-1 sm:pb-0\">\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 sm:h-9 sm:w-9\" onClick={handleCopyPrompt}>\n                {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>{copied ? \"Copied!\" : \"Copy prompt text\"}</p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Button asChild variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 sm:h-9 sm:w-9\">\n            <Link href={`/prompts/${prompt.id}`}>\n              <Eye className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n\n          <Button asChild variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 sm:h-9 sm:w-9\">\n            <Link href={`/prompts/${prompt.id}/edit`}>\n              <Pencil className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 sm:h-9 sm:w-9\">\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              <DropdownMenuItem asChild className=\"gap-2\">\n                <Link href={`/prompts/${prompt.id}`}>\n                  <ExternalLink className=\"h-4 w-4\" />\n                  Open in new tab\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => onDuplicate?.(prompt.id)} className=\"gap-2\">\n                <Duplicate className=\"h-4 w-4\" />\n                Duplicate\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleFavorite} className=\"gap-2\">\n                <Star className=\"h-4 w-4\" fill={isPromptFavorite ? \"currentColor\" : \"none\"} />\n                {isPromptFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                onClick={() => onDelete?.(prompt.id)}\n                className=\"text-destructive focus:text-destructive gap-2\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </Card>\n    </TooltipProvider>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-list-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-preview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-test-interface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prompt' is defined but never used.","line":12,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\ninterface PromptTestInterfaceProps {\n  prompt: {\n    id: number\n    name: string\n    prompt: string\n    systemMessage: string | null\n  }\n}\n\nexport function PromptTestInterface({ prompt }: PromptTestInterfaceProps) {\n  return (\n    <div>\n      <p>This component is under development. Please use the &quot;Test Prompt&quot; tab.</p>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-tester-streaming.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":19,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Loader2, Send, X } from \"lucide-react\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\ninterface PromptTesterStreamingProps {\n  promptId: number\n  prompt: string\n  systemMessage?: string | null\n  variables: string[]\n}\n\nexport function PromptTesterStreaming({ promptId, prompt, systemMessage, variables }: PromptTesterStreamingProps) {\n  const [variableValues, setVariableValues] = useState<Record<string, string>>({})\n  const [response, setResponse] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const abortControllerRef = useRef<AbortController | null>(null)\n\n  // Reset when variables change\n  useEffect(() => {\n    const initialValues: Record<string, string> = {}\n    variables.forEach((variable) => {\n      initialValues[variable] = \"\"\n    })\n    setVariableValues(initialValues)\n  }, [variables])\n\n  const handleVariableChange = (variable: string, value: string) => {\n    setVariableValues((prev) => ({\n      ...prev,\n      [variable]: value,\n    }))\n  }\n\n  const handleSubmit = async () => {\n    setIsLoading(true)\n    setError(null)\n    setResponse(\"\")\n\n    // Create a new AbortController for this request\n    abortControllerRef.current = new AbortController()\n    const signal = abortControllerRef.current.signal\n\n    try {\n      // Replace variables in the prompt\n      let processedPrompt = prompt\n      for (const [variable, value] of Object.entries(variableValues)) {\n        const placeholder = `{{${variable}}}`\n        // If value is empty, leave the placeholder\n        const replacement = value.trim() ? value : `[${variable}]`\n        processedPrompt = processedPrompt.replace(new RegExp(placeholder, \"g\"), replacement)\n      }\n\n      // Make the API request\n      const response = await fetch(\"/api/ai\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          prompt: processedPrompt,\n          systemMessage,\n        }),\n        signal,\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || `Error: ${response.status} ${response.statusText}`)\n      }\n\n      // Parse the JSON response\n      const data = await response.json()\n      setResponse(data.response)\n    } catch (err: any) {\n      // Don't show the error if it was caused by the user cancelling the request\n      if (err.name !== \"AbortError\") {\n        console.error(\"Error generating response:\", err)\n        setError(err.message || \"An error occurred while generating the response\")\n      }\n    } finally {\n      setIsLoading(false)\n      abortControllerRef.current = null\n    }\n  }\n\n  const handleCancel = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort()\n      abortControllerRef.current = null\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Test Prompt</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {variables.length > 0 && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium\">Variables</h3>\n            <div className=\"grid gap-3 sm:grid-cols-2\">\n              {variables.map((variable) => (\n                <div key={variable} className=\"grid gap-1.5\">\n                  <Label htmlFor={variable}>{variable}</Label>\n                  <Input\n                    id={variable}\n                    value={variableValues[variable] || \"\"}\n                    onChange={(e) => handleVariableChange(variable, e.target.value)}\n                    placeholder={`Enter value for ${variable}`}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-1.5\">\n          <Label htmlFor=\"response\">Response</Label>\n          <div className=\"relative\">\n            <Textarea\n              id=\"response\"\n              value={response}\n              readOnly\n              placeholder=\"AI response will appear here...\"\n              className=\"min-h-[200px] h-[40vh] sm:h-[300px] resize-y font-mono text-sm\"\n            />\n            {isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-background/80\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            )}\n          </div>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-2\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          {isLoading ? (\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <X className=\"mr-2 h-4 w-4\" />\n              Cancel\n            </Button>\n          ) : (\n            <Button onClick={handleSubmit} disabled={isLoading} className=\"w-full sm:w-auto\">\n              <Send className=\"mr-2 h-4 w-4\" />\n              Generate\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-tester.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":193,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6357,6399],"text":"This prompt doesn&apos;t contain any variables."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6357,6399],"text":"This prompt doesn&lsquo;t contain any variables."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6357,6399],"text":"This prompt doesn&#39;t contain any variables."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6357,6399],"text":"This prompt doesn&rsquo;t contain any variables."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { Loader2, Save, Send, Clock, RotateCcw } from \"lucide-react\"\nimport { testPrompt, savePromptTest } from \"@/app/actions\"\n\ninterface PromptTesterProps {\n  promptId: number\n  promptText: string\n  systemMessage: string | null\n  variables: string[]\n}\n\nexport function PromptTester({ promptId, promptText, systemMessage, variables }: PromptTesterProps) {\n  const router = useRouter()\n  const [variableValues, setVariableValues] = useState<Record<string, string>>({})\n  const [isLoading, setIsLoading] = useState(false)\n  const [testResult, setTestResult] = useState<any>(null)\n  const [testHistory, setTestHistory] = useState<any[]>([])\n  const [activeTab, setActiveTab] = useState(\"test\")\n  const responseRef = useRef<HTMLDivElement>(null)\n\n  // Initialize variable values\n  useEffect(() => {\n    const initialValues: Record<string, string> = {}\n    variables.forEach((variable) => {\n      initialValues[variable] = \"\"\n    })\n    setVariableValues(initialValues)\n  }, [variables])\n\n  // Function to handle variable input changes\n  const handleVariableChange = (variable: string, value: string) => {\n    setVariableValues((prev) => ({\n      ...prev,\n      [variable]: value,\n    }))\n  }\n\n  // Function to generate the final prompt with variables replaced\n  const generateFinalPrompt = () => {\n    let finalPrompt = promptText\n    for (const [key, value] of Object.entries(variableValues)) {\n      finalPrompt = finalPrompt.replace(new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, \"g\"), value || `[${key}]`)\n    }\n    return finalPrompt\n  }\n\n  // Function to test the prompt\n  const handleTest = async () => {\n    setIsLoading(true)\n    setTestResult(null)\n\n    try {\n      // Check if all variables have values\n      const missingVariables = variables.filter((v) => !variableValues[v])\n      if (missingVariables.length > 0) {\n        toast({\n          title: \"Missing variables\",\n          description: `Please provide values for: ${missingVariables.join(\", \")}`,\n          variant: \"destructive\",\n        })\n        setIsLoading(false)\n        return\n      }\n\n      const result = await testPrompt({\n        promptId,\n        prompt: promptText,\n        systemMessage,\n        variables: variableValues,\n      })\n\n      if (result.success && result.data) {\n        setTestResult(result.data)\n        // Add to history\n        setTestHistory((prev) => [result.data, ...prev].slice(0, 10))\n        setActiveTab(\"result\")\n      } else {\n        toast({\n          title: \"Test failed\",\n          description: result.error || \"Failed to test prompt. Please try again.\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error testing prompt:\", error)\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Function to save test result\n  const handleSaveTest = async () => {\n    if (!testResult) return\n\n    try {\n      const result = await savePromptTest(testResult)\n\n      if (result.success) {\n        toast({\n          title: \"Test saved\",\n          description: \"The test result has been saved successfully.\",\n        })\n      } else {\n        toast({\n          title: \"Save failed\",\n          description: result.error || \"Failed to save test. Please try again.\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error saving test:\", error)\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  // Function to restore a test from history\n  const handleRestoreTest = (test: any) => {\n    const restoredVariables: Record<string, string> = {}\n    Object.entries(test.variables).forEach(([key, value]) => {\n      restoredVariables[key] = value as string\n    })\n\n    setVariableValues(restoredVariables)\n    setActiveTab(\"test\")\n\n    toast({\n      title: \"Test restored\",\n      description: \"Variable values have been restored from the selected test.\",\n    })\n  }\n\n  // Function to format response time\n  const formatResponseTime = (ms: number) => {\n    if (ms < 1000) return `${ms}ms`\n    return `${(ms / 1000).toFixed(2)}s`\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>Test Prompt</CardTitle>\n        <CardDescription>Fill in the variables and test how the prompt performs with the AI.</CardDescription>\n      </CardHeader>\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mx-6\">\n          <TabsTrigger value=\"test\">Test</TabsTrigger>\n          <TabsTrigger value=\"result\" disabled={!testResult}>\n            Result\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" disabled={testHistory.length === 0}>\n            History\n          </TabsTrigger>\n        </TabsList>\n\n        <CardContent>\n          <TabsContent value=\"test\" className=\"space-y-4 mt-4\">\n            {variables.length > 0 ? (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-sm font-medium\">Variables</h3>\n                {variables.map((variable) => (\n                  <div key={variable} className=\"grid gap-2\">\n                    <Label htmlFor={variable}>{variable}</Label>\n                    <Textarea\n                      id={variable}\n                      placeholder={`Enter value for ${variable}`}\n                      value={variableValues[variable] || \"\"}\n                      onChange={(e) => handleVariableChange(variable, e.target.value)}\n                      className=\"min-h-[80px]\"\n                    />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"bg-muted p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">This prompt doesn't contain any variables.</p>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <h3 className=\"text-sm font-medium\">Preview</h3>\n              <div className=\"bg-muted p-4 rounded-md whitespace-pre-wrap text-sm\">{generateFinalPrompt()}</div>\n            </div>\n\n            <Button onClick={handleTest} disabled={isLoading} className=\"w-full\">\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Testing...\n                </>\n              ) : (\n                <>\n                  <Send className=\"mr-2 h-4 w-4\" />\n                  Test Prompt\n                </>\n              )}\n            </Button>\n          </TabsContent>\n\n          <TabsContent value=\"result\" className=\"space-y-4 mt-4\">\n            {testResult && (\n              <>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-medium\">AI Response</h3>\n                    <div className=\"flex items-center text-xs text-muted-foreground\">\n                      <Clock className=\"mr-1 h-3 w-3\" />\n                      {formatResponseTime(testResult.responseTime)}\n                    </div>\n                  </div>\n                  <div\n                    ref={responseRef}\n                    className=\"bg-muted p-4 rounded-md whitespace-pre-wrap text-sm max-h-[400px] overflow-y-auto\"\n                  >\n                    {testResult.response}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-sm font-medium\">Final Prompt</h3>\n                  <div className=\"bg-muted p-4 rounded-md whitespace-pre-wrap text-sm max-h-[200px] overflow-y-auto\">\n                    {testResult.finalPrompt}\n                  </div>\n                </div>\n\n                <Button onClick={handleSaveTest} variant=\"outline\" className=\"w-full\">\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Save Test Result\n                </Button>\n              </>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-4 mt-4\">\n            {testHistory.length > 0 ? (\n              <div className=\"space-y-4\">\n                {testHistory.map((test, index) => (\n                  <div key={index} className=\"border rounded-md p-4 space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"text-sm font-medium\">Test {index + 1}</h4>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(test.timestamp).toLocaleString()}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleRestoreTest(test)}\n                          title=\"Restore this test\"\n                        >\n                          <RotateCcw className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"text-sm line-clamp-2 text-muted-foreground\">\n                      {test.response.substring(0, 100)}...\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"bg-muted p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">No test history available.</p>\n              </div>\n            )}\n          </TabsContent>\n        </CardContent>\n      </Tabs>\n\n      <CardFooter className=\"flex justify-between\">\n        <Button variant=\"outline\" onClick={() => router.back()}>\n          Back\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-testing-interface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoadingTests' is assigned a value but never used.","line":53,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":93,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":66}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Play, Copy, Check, Sparkles, Loader2, Variable, MessageSquare, Save, Download } from \"lucide-react\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { extractVariables } from \"@/lib/validation-utils\"\nimport { testPrompt, savePromptTest } from \"@/app/actions\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\ninterface PromptTestingInterfaceProps {\n  prompt: {\n    id: number\n    name: string\n    prompt: string\n    systemMessage: string | null\n  }\n}\n\ninterface VariableValues {\n  [key: string]: string\n}\n\ninterface TestResult {\n  id?: number\n  promptId: number\n  variables: VariableValues\n  finalPrompt: string\n  response: string\n  responseTime: number\n  timestamp: string\n  saved?: boolean\n}\n\nexport function PromptTestingInterface({ prompt }: PromptTestingInterfaceProps) {\n  const [variables, setVariables] = useState<string[]>([])\n  const [variableValues, setVariableValues] = useState<VariableValues>({})\n  const [finalPrompt, setFinalPrompt] = useState(\"\")\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [isSaving, setIsSaving] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const [activeTab, setActiveTab] = useState(\"variables\")\n  const [testResult, setTestResult] = useState<TestResult | null>(null)\n  const [useSystemMessage, setUseSystemMessage] = useState(true)\n  const [recentTests, setRecentTests] = useState<TestResult[]>([])\n  const [isLoadingTests, setIsLoadingTests] = useState(false)\n\n  // Extract variables from the prompt\n  useEffect(() => {\n    const extractedVars = extractVariables(prompt.prompt)\n    setVariables(extractedVars)\n\n    // Initialize variables with empty strings\n    const initialVars: VariableValues = {}\n    extractedVars.forEach((variable) => {\n      initialVars[variable] = \"\"\n    })\n    setVariableValues(initialVars)\n  }, [prompt.prompt])\n\n  const handleVariableChange = (variable: string, value: string) => {\n    setVariableValues((prev) => ({ ...prev, [variable]: value }))\n  }\n\n  const generateFinalPrompt = () => {\n    let result = prompt.prompt\n\n    // Replace variables in the prompt\n    for (const [key, value] of Object.entries(variableValues)) {\n      const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, \"g\")\n      result = result.replace(regex, value || `{{${key}}}`)\n    }\n\n    setFinalPrompt(result)\n    return result\n  }\n\n  const handleTest = async () => {\n    setIsGenerating(true)\n    setActiveTab(\"result\")\n\n    try {\n      const finalPromptText = generateFinalPrompt()\n\n      // Check if any variables are empty\n      const emptyVars = Object.entries(variableValues).filter(([_, value]) => !value)\n      if (emptyVars.length > 0) {\n        toast({\n          title: \"Warning\",\n          description: \"Some variables are empty. They will remain as placeholders in the test.\",\n          variant: \"default\",\n        })\n      }\n\n      // Call the API to test the prompt\n      const result = await testPrompt({\n        promptId: prompt.id,\n        prompt: finalPromptText,\n        systemMessage: useSystemMessage ? prompt.systemMessage : null,\n        variables: variableValues,\n      })\n\n      if (result.success) {\n        setTestResult(result.data)\n        // Add to recent tests\n        setRecentTests((prev) => [result.data, ...prev].slice(0, 5))\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || \"Failed to test prompt\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error testing prompt:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to test prompt\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  const handleSaveTest = async () => {\n    if (!testResult) return\n\n    setIsSaving(true)\n    try {\n      const result = await savePromptTest(testResult)\n\n      if (result.success) {\n        setTestResult((prev) => (prev ? { ...prev, saved: true, id: result.data.id } : null))\n        toast({\n          title: \"Test saved\",\n          description: \"The test result has been saved successfully.\",\n        })\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || \"Failed to save test\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error saving test:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to save test\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsSaving(false)\n    }\n  }\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopied(true)\n      toast({\n        title: \"Copied!\",\n        description: \"Text copied to clipboard\",\n      })\n      setTimeout(() => setCopied(false), 2000)\n    } catch (error) {\n      console.error(\"Failed to copy text:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  const fillRandomValues = () => {\n    const filledVars: VariableValues = {}\n    variables.forEach((variable) => {\n      // Generate placeholder text based on variable name\n      if (variable.includes(\"name\")) {\n        filledVars[variable] = \"John Smith\"\n      } else if (variable.includes(\"date\")) {\n        filledVars[variable] = new Date().toLocaleDateString()\n      } else if (variable.includes(\"email\")) {\n        filledVars[variable] = \"john.smith@example.com\"\n      } else if (variable.includes(\"contract\") || variable.includes(\"text\")) {\n        filledVars[variable] =\n          \"This agreement is made between Party A and Party B for the provision of legal services...\"\n      } else {\n        filledVars[variable] = `Sample ${variable} value`\n      }\n    })\n    setVariableValues(filledVars)\n  }\n\n  const exportTestResult = () => {\n    if (!testResult) return\n\n    try {\n      const data = JSON.stringify(testResult, null, 2)\n      const blob = new Blob([data], { type: \"application/json\" })\n      const url = URL.createObjectURL(blob)\n\n      const link = document.createElement(\"a\")\n      link.href = url\n      link.download = `prompt-test-${new Date().toISOString().slice(0, 19).replace(/:/g, \"-\")}.json`\n      document.body.appendChild(link)\n      link.click()\n\n      document.body.removeChild(link)\n      URL.revokeObjectURL(url)\n\n      toast({\n        title: \"Exported\",\n        description: \"Test result has been exported as JSON\",\n      })\n    } catch (error) {\n      console.error(\"Error exporting test result:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to export test result\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <TooltipProvider>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5 text-primary\" />\n            Test Prompt\n          </CardTitle>\n          <CardDescription>Test your prompt with different variable values</CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList>\n              <TabsTrigger value=\"variables\" className=\"gap-1\">\n                <Variable className=\"h-4 w-4\" />\n                Variables\n              </TabsTrigger>\n              <TabsTrigger value=\"preview\" disabled={!finalPrompt}>\n                Preview\n              </TabsTrigger>\n              <TabsTrigger value=\"result\" disabled={!testResult && !isGenerating}>\n                Result\n              </TabsTrigger>\n              <TabsTrigger value=\"history\">History</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"variables\" className=\"pt-4 space-y-4\">\n              {variables.length > 0 ? (\n                <>\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-sm font-medium\">Fill in the variables</h3>\n                    <Button variant=\"outline\" size=\"sm\" onClick={fillRandomValues} className=\"h-8 px-2 gap-1\">\n                      <Sparkles className=\"h-3.5 w-3.5\" />\n                      Fill Sample Data\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {variables.map((variable) => (\n                      <div key={variable} className=\"space-y-2\">\n                        <Label htmlFor={variable} className=\"flex items-center gap-2\">\n                          {variable}\n                          <Badge variant=\"outline\" className=\"font-normal\">\n                            Variable\n                          </Badge>\n                        </Label>\n                        <Input\n                          id={variable}\n                          placeholder={`Enter value for ${variable}`}\n                          value={variableValues[variable] || \"\"}\n                          onChange={(e) => handleVariableChange(variable, e.target.value)}\n                        />\n                      </div>\n                    ))}\n                  </div>\n\n                  {prompt.systemMessage && (\n                    <div className=\"flex items-center space-x-2 pt-2\">\n                      <Switch\n                        id=\"use-system-message\"\n                        checked={useSystemMessage}\n                        onCheckedChange={setUseSystemMessage}\n                      />\n                      <Label htmlFor=\"use-system-message\" className=\"flex items-center gap-2\">\n                        <MessageSquare className=\"h-4 w-4\" />\n                        Include system message\n                      </Label>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No variables found in this prompt. You can still test it.</p>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"preview\" className=\"pt-4 space-y-4\">\n              <div>\n                <h3 className=\"text-sm font-medium mb-2 flex justify-between items-center\">\n                  <span>Final Prompt</span>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(finalPrompt)}\n                        className=\"h-8 gap-1\"\n                      >\n                        {copied ? <Check className=\"h-3.5 w-3.5\" /> : <Copy className=\"h-3.5 w-3.5\" />}\n                        {copied ? \"Copied!\" : \"Copy\"}\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Copy to clipboard</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </h3>\n                <div className=\"bg-muted/50 p-4 rounded-md whitespace-pre-wrap border\">{finalPrompt}</div>\n              </div>\n\n              {useSystemMessage && prompt.systemMessage && (\n                <div>\n                  <h3 className=\"text-sm font-medium mb-2\">System Message</h3>\n                  <div className=\"bg-muted/50 p-4 rounded-md whitespace-pre-wrap border\">{prompt.systemMessage}</div>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"result\" className=\"pt-4 space-y-4\">\n              {isGenerating ? (\n                <div className=\"flex flex-col items-center justify-center py-12\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-primary mb-4\" />\n                  <p className=\"text-muted-foreground\">Generating response...</p>\n                </div>\n              ) : testResult ? (\n                <>\n                  <div>\n                    <h3 className=\"text-sm font-medium mb-2 flex justify-between items-center\">\n                      <span>AI Response</span>\n                      <div className=\"flex gap-2\">\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(testResult.response)}\n                              className=\"h-8 gap-1\"\n                            >\n                              {copied ? <Check className=\"h-3.5 w-3.5\" /> : <Copy className=\"h-3.5 w-3.5\" />}\n                              {copied ? \"Copied!\" : \"Copy\"}\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>Copy to clipboard</p>\n                          </TooltipContent>\n                        </Tooltip>\n\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" onClick={exportTestResult} className=\"h-8 gap-1\">\n                              <Download className=\"h-3.5 w-3.5\" />\n                              Export\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>Export as JSON</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </div>\n                    </h3>\n                    <div className=\"bg-muted/50 p-4 rounded-md whitespace-pre-wrap border\">{testResult.response}</div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n                    <div>Response time: {testResult.responseTime}ms</div>\n                    <div>{new Date(testResult.timestamp).toLocaleString()}</div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No test results yet. Run a test to see results here.</p>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"history\" className=\"pt-4\">\n              {isLoadingTests ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <Card key={i} className=\"p-4\">\n                      <Skeleton className=\"h-4 w-1/3 mb-2\" />\n                      <Skeleton className=\"h-20 w-full\" />\n                      <div className=\"flex justify-between mt-2\">\n                        <Skeleton className=\"h-3 w-24\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : recentTests.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {recentTests.map((test, index) => (\n                    <Card key={index} className=\"p-4 hover:shadow-sm transition-shadow\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h4 className=\"text-sm font-medium\">Test {test.id || index + 1}</h4>\n                        <Badge variant={test.saved ? \"default\" : \"outline\"} className=\"text-xs\">\n                          {test.saved ? \"Saved\" : \"Unsaved\"}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm line-clamp-3 mb-2\">{test.response}</div>\n                      <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                        <div>Response time: {test.responseTime}ms</div>\n                        <div>{new Date(test.timestamp).toLocaleString()}</div>\n                      </div>\n                      <div className=\"flex justify-end mt-2 gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-7 text-xs\"\n                          onClick={() => {\n                            setTestResult(test)\n                            setActiveTab(\"result\")\n                          }}\n                        >\n                          View\n                        </Button>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No test history available.</p>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n\n        <CardFooter className=\"flex justify-between\">\n          <Button\n            variant=\"outline\"\n            onClick={() => {\n              generateFinalPrompt()\n              setActiveTab(\"preview\")\n            }}\n            disabled={isGenerating}\n          >\n            Preview\n          </Button>\n\n          <div className=\"flex gap-2\">\n            {testResult && !testResult.saved && (\n              <Button variant=\"outline\" onClick={handleSaveTest} disabled={isSaving} className=\"gap-1\">\n                {isSaving ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Save className=\"h-4 w-4\" />}\n                {isSaving ? \"Saving...\" : \"Save Result\"}\n              </Button>\n            )}\n\n            <Button onClick={handleTest} disabled={isGenerating} className=\"gap-1\">\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Testing...\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-4 w-4\" />\n                  Test Prompt\n                </>\n              )}\n            </Button>\n          </div>\n        </CardFooter>\n      </Card>\n    </TooltipProvider>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/prompt-version-history.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/search-filter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tag-management.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":170,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5548,5580],"text":"\n                              &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5548,5580],"text":"\n                              &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5548,5580],"text":"\n                              &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5548,5580],"text":"\n                              &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":170,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5592,5622],"text":"&quot;\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5592,5622],"text":"&ldquo;\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5592,5622],"text":"&#34;\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5592,5622],"text":"&rdquo;\n                            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6719,6758],"text":"\n                              Create &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6719,6758],"text":"\n                              Create &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6719,6758],"text":"\n                              Create &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6719,6758],"text":"\n                              Create &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6770,6800],"text":"&quot;\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6770,6800],"text":"&ldquo;\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6770,6800],"text":"&#34;\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6770,6800],"text":"&rdquo;\n                            "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { X, Plus, TagIcon, Loader2 } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { createTag, getAllTags } from \"@/app/actions\"\n\ninterface TagManagementProps {\n  selectedTags: string[]\n  onTagsChange: (tags: string[]) => void\n  className?: string\n  disabled?: boolean\n}\n\nexport function TagManagement({ selectedTags, onTagsChange, className, disabled = false }: TagManagementProps) {\n  const [open, setOpen] = useState(false)\n  const [inputValue, setInputValue] = useState(\"\")\n  const [availableTags, setAvailableTags] = useState<string[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isCreatingTag, setIsCreatingTag] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // Load available tags\n  useEffect(() => {\n    const loadTags = async () => {\n      setIsLoading(true)\n      try {\n        const tags = await getAllTags()\n        setAvailableTags(tags)\n      } catch (error) {\n        console.error(\"Error loading tags:\", error)\n        toast({\n          title: \"Error\",\n          description: \"Failed to load tags\",\n          variant: \"destructive\",\n        })\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    loadTags()\n  }, [])\n\n  const handleSelect = (tag: string) => {\n    if (!selectedTags.includes(tag)) {\n      const newTags = [...selectedTags, tag]\n      onTagsChange(newTags)\n    }\n    setInputValue(\"\")\n    setOpen(false)\n    inputRef.current?.focus()\n  }\n\n  const handleRemove = (tag: string) => {\n    const newTags = selectedTags.filter((t) => t !== tag)\n    onTagsChange(newTags)\n  }\n\n  const handleCreateTag = async () => {\n    if (!inputValue.trim()) return\n\n    setIsCreatingTag(true)\n    try {\n      const newTag = inputValue.trim()\n      const result = await createTag(newTag)\n\n      if (result.success) {\n        setAvailableTags((prev) => [...prev, newTag])\n        handleSelect(newTag)\n        toast({\n          title: \"Tag created\",\n          description: `Tag \"${newTag}\" has been created.`,\n        })\n      } else {\n        toast({\n          title: \"Error\",\n          description: result.error || \"Failed to create tag\",\n          variant: \"destructive\",\n        })\n      }\n    } catch (error) {\n      console.error(\"Error creating tag:\", error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to create tag\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsCreatingTag(false)\n      setInputValue(\"\")\n    }\n  }\n\n  const filteredTags = availableTags.filter(\n    (tag) => tag.toLowerCase().includes(inputValue.toLowerCase()) && !selectedTags.includes(tag),\n  )\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"flex flex-wrap gap-2 min-h-9\">\n        {selectedTags.map((tag) => (\n          <Badge key={tag} variant=\"secondary\" className=\"px-2 py-1 gap-1 text-xs\">\n            <TagIcon className=\"h-3 w-3\" />\n            <span className=\"max-w-[100px] sm:max-w-[200px] truncate\">{tag}</span>\n            <button\n              className=\"ml-1 text-muted-foreground hover:text-foreground rounded-full\"\n              onClick={() => handleRemove(tag)}\n              disabled={disabled}\n            >\n              <X className=\"h-3 w-3\" />\n            </button>\n          </Badge>\n        ))}\n\n        {!disabled && (\n          <Popover open={open} onOpenChange={setOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"h-9 gap-1 border-dashed\" disabled={disabled}>\n                <Plus className=\"h-3.5 w-3.5\" />\n                Add Tag\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"p-0 w-[200px]\" align=\"start\">\n              <Command>\n                <CommandInput\n                  placeholder=\"Search tags...\"\n                  value={inputValue}\n                  onValueChange={setInputValue}\n                  ref={inputRef}\n                  className=\"h-9\"\n                />\n\n                <CommandList>\n                  {isLoading ? (\n                    <div className=\"py-6 text-center\">\n                      <Loader2 className=\"h-4 w-4 animate-spin mx-auto\" />\n                      <p className=\"text-sm text-muted-foreground mt-2\">Loading tags...</p>\n                    </div>\n                  ) : (\n                    <>\n                      <CommandEmpty>\n                        {inputValue.trim() !== \"\" ? (\n                          <div className=\"py-3 px-2\">\n                            <p className=\"text-sm text-muted-foreground mb-2\">Create new tag:</p>\n                            <Button\n                              size=\"sm\"\n                              className=\"w-full justify-start gap-1 h-8\"\n                              onClick={handleCreateTag}\n                              disabled={isCreatingTag}\n                            >\n                              {isCreatingTag ? (\n                                <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                              ) : (\n                                <Plus className=\"h-3.5 w-3.5\" />\n                              )}\n                              \"{inputValue}\"\n                            </Button>\n                          </div>\n                        ) : (\n                          <p className=\"py-6 text-center text-sm\">No tags found.</p>\n                        )}\n                      </CommandEmpty>\n\n                      {filteredTags.length > 0 && (\n                        <CommandGroup heading=\"Available Tags\">\n                          {filteredTags.map((tag) => (\n                            <CommandItem key={tag} value={tag} onSelect={() => handleSelect(tag)} className=\"gap-2\">\n                              <TagIcon className=\"h-3.5 w-3.5\" />\n                              {tag}\n                            </CommandItem>\n                          ))}\n                        </CommandGroup>\n                      )}\n\n                      {inputValue.trim() !== \"\" && filteredTags.length > 0 && (\n                        <>\n                          <CommandSeparator />\n                          <CommandGroup>\n                            <CommandItem onSelect={handleCreateTag} className=\"gap-1\">\n                              <Plus className=\"h-3.5 w-3.5\" />\n                              Create \"{inputValue}\"\n                            </CommandItem>\n                          </CommandGroup>\n                        </>\n                      )}\n                    </>\n                  )}\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        )}\n      </div>\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tags-input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allTags' is assigned a value but never used.","line":18,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { X, Plus } from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { useTags } from \"@/components/tags-provider\"\n\ninterface TagsInputProps {\n  promptId: number\n  className?: string\n}\n\nexport function TagsInput({ promptId, className }: TagsInputProps) {\n  const { getPromptTags, addTag, removeTag, allTags } = useTags()\n  const [newTag, setNewTag] = useState(\"\")\n  const [isAdding, setIsAdding] = useState(false)\n\n  const promptTags = getPromptTags(promptId)\n\n  const handleAddTag = () => {\n    if (newTag.trim()) {\n      addTag(promptId, newTag.trim())\n      setNewTag(\"\")\n      setIsAdding(false)\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault()\n      handleAddTag()\n    } else if (e.key === \"Escape\") {\n      setIsAdding(false)\n      setNewTag(\"\")\n    }\n  }\n\n  return (\n    <div className={`flex flex-wrap gap-2 ${className}`}>\n      {promptTags.map((tag) => (\n        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n          {tag}\n          <button\n            onClick={() => removeTag(promptId, tag)}\n            className=\"ml-1 rounded-full hover:bg-muted\"\n            aria-label={`Remove ${tag} tag`}\n          >\n            <X className=\"h-3 w-3\" />\n          </button>\n        </Badge>\n      ))}\n\n      {isAdding ? (\n        <div className=\"flex items-center gap-1\">\n          <Input\n            type=\"text\"\n            value={newTag}\n            onChange={(e) => setNewTag(e.target.value)}\n            onKeyDown={handleKeyDown}\n            className=\"h-7 w-32 text-xs\"\n            placeholder=\"Add tag...\"\n            autoFocus\n          />\n          <Button size=\"sm\" variant=\"ghost\" className=\"h-7 w-7 p-0\" onClick={handleAddTag}>\n            <Plus className=\"h-3 w-3\" />\n            <span className=\"sr-only\">Add Tag</span>\n          </Button>\n        </div>\n      ) : (\n        <Button size=\"sm\" variant=\"outline\" className=\"h-6 text-xs\" onClick={() => setIsAdding(true)}>\n          <Plus className=\"mr-1 h-3 w-3\" />\n          Add Tag\n        </Button>\n      )}\n    </div>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tags-manager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tags-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/theme/theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tool-call.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/tools-panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/badge.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VariantProps' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n        subtle: \"border-transparent bg-primary/10 text-primary hover:bg-primary/20\",\n      },\n      defaultVariants: {\n        variant: \"default\",\n      },\n    },\n  },\n)\n\nexport interface BadgeProps {\n  variant?: BadgeVariants\n  className?: string\n  children?: React.ReactNode\n}\n\nconst Badge: React.FC<BadgeProps> = ({ className, variant, children, ...props }) => {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props}>\n      {children}\n    </div>\n  )\n}\n\nexport { Badge, badgeVariants }\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":47,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":48,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport type * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell: \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(buttonVariants({ variant: \"ghost\" }), \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle: \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":72,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/combobox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":26,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":26,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[716,767],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport type { DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />)\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,148],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nInput.displayName = \"Input\"\n\nexport { Input }\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/motion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,157],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 resize-none\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/ui/typography.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/version-history.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptId' is defined but never used.","line":61,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { History, ArrowLeft, ArrowRight, RotateCcw, Clock, Eye } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { formatDistanceToNow } from \"date-fns\"\nimport { SlideUp } from \"./ui/motion\"\n\n// Mock version history - in a real app, this would come from an API\nconst VERSION_HISTORY = [\n  {\n    id: 1,\n    version: \"v3\",\n    prompt:\n      \"Analyze the following contract and identify any potential legal issues, ambiguities, or clauses that may be disadvantageous to my client: {{contract_text}}\",\n    systemMessage:\n      \"You are a legal expert specializing in contract law. Provide detailed analysis with references to relevant legal principles and case law where appropriate.\",\n    updatedAt: new Date(2023, 6, 15),\n    updatedBy: {\n      name: \"Alex Johnson\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    changeDescription: \"Added more specific instructions for contract analysis\",\n  },\n  {\n    id: 2,\n    version: \"v2\",\n    prompt: \"Review this contract and identify any issues: {{contract_text}}\",\n    systemMessage: \"You are a legal expert specializing in contract law. Provide detailed analysis.\",\n    updatedAt: new Date(2023, 6, 10),\n    updatedBy: {\n      name: \"Sarah Williams\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    changeDescription: \"Updated system message for better context\",\n  },\n  {\n    id: 3,\n    version: \"v1\",\n    prompt: \"Review this contract: {{contract_text}}\",\n    systemMessage: \"You are a legal expert.\",\n    updatedAt: new Date(2023, 6, 5),\n    updatedBy: {\n      name: \"Alex Johnson\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    changeDescription: \"Initial version\",\n  },\n]\n\ninterface VersionHistoryProps {\n  promptId: number\n  onClose?: () => void\n}\n\nexport function VersionHistory({ promptId, onClose }: VersionHistoryProps) {\n  const [selectedVersion, setSelectedVersion] = useState(VERSION_HISTORY[0])\n  const [isRestoring, setIsRestoring] = useState(false)\n\n  const handleRestore = () => {\n    setIsRestoring(true)\n\n    // Simulate API call with timeout\n    setTimeout(() => {\n      toast({\n        title: \"Version restored\",\n        description: `Restored to version ${selectedVersion.version}`,\n      })\n\n      setIsRestoring(false)\n      if (onClose) onClose()\n    }, 1000)\n  }\n\n  const handleNavigate = (direction: \"prev\" | \"next\") => {\n    const currentIndex = VERSION_HISTORY.findIndex((v) => v.id === selectedVersion.id)\n\n    if (direction === \"prev\" && currentIndex < VERSION_HISTORY.length - 1) {\n      setSelectedVersion(VERSION_HISTORY[currentIndex + 1])\n    } else if (direction === \"next\" && currentIndex > 0) {\n      setSelectedVersion(VERSION_HISTORY[currentIndex - 1])\n    }\n  }\n\n  return (\n    <SlideUp>\n      <Card className=\"border-primary/20 shadow-lg\">\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"space-y-1\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <History className=\"h-5 w-5 text-primary\" />\n                Version History\n              </CardTitle>\n              <CardDescription>View and restore previous versions of this prompt</CardDescription>\n            </div>\n            {onClose && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n                Close\n              </Button>\n            )}\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedVersion.version}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                <Clock className=\"h-3.5 w-3.5\" />\n                {formatDistanceToNow(selectedVersion.updatedAt, { addSuffix: true })}\n              </span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => handleNavigate(\"prev\")}\n                disabled={VERSION_HISTORY.findIndex((v) => v.id === selectedVersion.id) === VERSION_HISTORY.length - 1}\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => handleNavigate(\"next\")}\n                disabled={VERSION_HISTORY.findIndex((v) => v.id === selectedVersion.id) === 0}\n              >\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2 mb-4 bg-muted/50 p-3 rounded-lg\">\n            <Avatar>\n              <AvatarImage src={selectedVersion.updatedBy.avatar} alt={selectedVersion.updatedBy.name} />\n              <AvatarFallback>\n                {selectedVersion.updatedBy.name\n                  .split(\" \")\n                  .map((n) => n[0])\n                  .join(\"\")}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"text-sm font-medium\">{selectedVersion.updatedBy.name}</div>\n              <div className=\"text-xs text-muted-foreground\">{selectedVersion.changeDescription}</div>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"prompt\">\n            <TabsList className=\"mb-4\">\n              <TabsTrigger value=\"prompt\">Prompt</TabsTrigger>\n              <TabsTrigger value=\"system\">System Message</TabsTrigger>\n              <TabsTrigger value=\"diff\">Changes</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"prompt\">\n              <div className=\"bg-muted/50 p-3 rounded-lg whitespace-pre-wrap text-sm\">{selectedVersion.prompt}</div>\n            </TabsContent>\n\n            <TabsContent value=\"system\">\n              <div className=\"bg-muted/50 p-3 rounded-lg whitespace-pre-wrap text-sm\">\n                {selectedVersion.systemMessage}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"diff\">\n              <div className=\"bg-muted/50 p-3 rounded-lg text-sm\">\n                {/* In a real app, this would show a diff between versions */}\n                <p className=\"text-muted-foreground text-center py-4\">Diff view would show changes between versions</p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n\n        <CardFooter className=\"flex justify-between border-t pt-4\">\n          <Button variant=\"outline\" className=\"gap-2\" onClick={() => window.open(\"#\", \"_blank\")}>\n            <Eye className=\"h-4 w-4\" />\n            Preview\n          </Button>\n\n          <Button\n            onClick={handleRestore}\n            disabled={isRestoring || VERSION_HISTORY.findIndex((v) => v.id === selectedVersion.id) === 0}\n            className=\"gap-2\"\n          >\n            {isRestoring ? (\n              <>\n                <span className=\"animate-spin\">⏳</span>\n                Restoring...\n              </>\n            ) : (\n              <>\n                <RotateCcw className=\"h-4 w-4\" />\n                Restore This Version\n              </>\n            )}\n          </Button>\n        </CardFooter>\n      </Card>\n    </SlideUp>\n  )\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/components/websearch-config.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/config/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/config/functions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/config/tools-list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":21,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/db-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DB_CONNECTION_TIMEOUT' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DB_IDLE_TIMEOUT' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MAX_CONNECTIONS' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { sql } from \"@/lib/db\"\n\n/**\n * Database connection pool configuration\n */\nconst DB_CONNECTION_TIMEOUT = 30000 // Increased from 10000 to 30000 (30 seconds)\nconst DB_IDLE_TIMEOUT = 60000 // 60 seconds\nconst MAX_CONNECTIONS = 10\n\n/**\n * Execute a query with a timeout\n */\nexport async function executeQueryWithTimeout<T>(queryFn: () => Promise<T>, timeout = 10000): Promise<T> {\n  const timeoutPromise = new Promise<never>((_, reject) => {\n    setTimeout(() => reject(new Error(`Query timed out after ${timeout}ms`)), timeout)\n  })\n\n  // Race between the query and the timeout\n  return Promise.race([queryFn(), timeoutPromise]) as Promise<T>\n}\n\n/**\n * Execute a function within a transaction\n */\nexport async function withTransaction<T>(callback: (client: typeof sql) => Promise<T>): Promise<T> {\n  // Note: Neon HTTP doesn't support transactions in the same way as pg\n  // This is a simplified version that just passes the sql client\n  return callback(sql)\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/db/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/server/ai-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/server/openai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/tools/tools-handling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/tools/tools.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/validation-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/lib/validations/prompt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/next.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/stores/useConversationStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/stores/useToolsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":383,"column":13,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":383,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      screens: {\n        xs: \"480px\",\n      },\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          muted: \"hsl(var(--primary-muted))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success))\",\n          foreground: \"hsl(var(--success-foreground))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning))\",\n          foreground: \"hsl(var(--warning-foreground))\",\n        },\n        info: {\n          DEFAULT: \"hsl(var(--info))\",\n          foreground: \"hsl(var(--info-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        \"fade-out\": {\n          from: { opacity: \"1\" },\n          to: { opacity: \"0\" },\n        },\n        \"slide-in-from-top\": {\n          from: { transform: \"translateY(-10%)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        \"slide-out-to-top\": {\n          from: { transform: \"translateY(0)\", opacity: \"1\" },\n          to: { transform: \"translateY(-10%)\", opacity: \"0\" },\n        },\n        \"slide-in-from-left\": {\n          from: { transform: \"translateX(-10%)\", opacity: \"0\" },\n          to: { transform: \"translateX(0)\", opacity: \"1\" },\n        },\n        \"slide-in-from-right\": {\n          from: { transform: \"translateX(10%)\", opacity: \"0\" },\n          to: { transform: \"translateX(0)\", opacity: \"1\" },\n        },\n        \"pulse-subtle\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.8\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.2s ease-out\",\n        \"fade-out\": \"fade-out 0.2s ease-out\",\n        \"slide-in-from-top\": \"slide-in-from-top 0.3s ease-out\",\n        \"slide-out-to-top\": \"slide-out-to-top 0.3s ease-out\",\n        \"slide-in-from-left\": \"slide-in-from-left 0.3s ease-out\",\n        \"slide-in-from-right\": \"slide-in-from-right 0.3s ease-out\",\n        \"pulse-subtle\": \"pulse-subtle 2s ease-in-out infinite\",\n      },\n      typography: {\n        DEFAULT: {\n          css: {\n            maxWidth: \"65ch\",\n            color: \"var(--tw-prose-body)\",\n            '[class~=\"lead\"]': {\n              color: \"var(--tw-prose-lead)\",\n            },\n            a: {\n              color: \"var(--tw-prose-links)\",\n              textDecoration: \"underline\",\n              fontWeight: \"500\",\n            },\n            strong: {\n              color: \"var(--tw-prose-bold)\",\n              fontWeight: \"600\",\n            },\n            \"a strong\": {\n              color: \"inherit\",\n            },\n            \"blockquote strong\": {\n              color: \"inherit\",\n            },\n            \"thead th strong\": {\n              color: \"inherit\",\n            },\n            ol: {\n              listStyleType: \"decimal\",\n            },\n            'ol[type=\"A\"]': {\n              listStyleType: \"upper-alpha\",\n            },\n            'ol[type=\"a\"]': {\n              listStyleType: \"lower-alpha\",\n            },\n            'ol[type=\"A\" s]': {\n              listStyleType: \"upper-alpha\",\n            },\n            'ol[type=\"a\" s]': {\n              listStyleType: \"lower-alpha\",\n            },\n            'ol[type=\"I\"]': {\n              listStyleType: \"upper-roman\",\n            },\n            'ol[type=\"i\"]': {\n              listStyleType: \"lower-roman\",\n            },\n            'ol[type=\"I\" s]': {\n              listStyleType: \"upper-roman\",\n            },\n            'ol[type=\"i\" s]': {\n              listStyleType: \"lower-roman\",\n            },\n            'ol[type=\"1\"]': {\n              listStyleType: \"decimal\",\n            },\n            ul: {\n              listStyleType: \"disc\",\n            },\n            \"ol > li::marker\": {\n              fontWeight: \"400\",\n              color: \"var(--tw-prose-counters)\",\n            },\n            \"ul > li::marker\": {\n              color: \"var(--tw-prose-bullets)\",\n            },\n            hr: {\n              borderColor: \"var(--tw-prose-hr)\",\n              borderTopWidth: 1,\n            },\n            blockquote: {\n              fontWeight: \"500\",\n              fontStyle: \"italic\",\n              color: \"var(--tw-prose-quotes)\",\n              borderLeftWidth: \"0.25rem\",\n              borderLeftColor: \"var(--tw-prose-quote-borders)\",\n              paddingLeft: \"1em\",\n            },\n            \"blockquote p:first-of-type::before\": {\n              content: \"open-quote\",\n            },\n            \"blockquote p:last-of-type::after\": {\n              content: \"close-quote\",\n            },\n            h1: {\n              color: \"var(--tw-prose-headings)\",\n              fontWeight: \"800\",\n              fontSize: \"2.25em\",\n              marginTop: \"0\",\n              marginBottom: \"0.8888889em\",\n              lineHeight: \"1.1111111\",\n            },\n            \"h1 strong\": {\n              fontWeight: \"900\",\n              color: \"inherit\",\n            },\n            h2: {\n              color: \"var(--tw-prose-headings)\",\n              fontWeight: \"700\",\n              fontSize: \"1.5em\",\n              marginTop: \"2em\",\n              marginBottom: \"1em\",\n              lineHeight: \"1.3333333\",\n            },\n            \"h2 strong\": {\n              fontWeight: \"800\",\n              color: \"inherit\",\n            },\n            h3: {\n              color: \"var(--tw-prose-headings)\",\n              fontWeight: \"600\",\n              fontSize: \"1.25em\",\n              marginTop: \"1.6em\",\n              marginBottom: \"0.6em\",\n              lineHeight: \"1.6\",\n            },\n            \"h3 strong\": {\n              fontWeight: \"700\",\n              color: \"inherit\",\n            },\n            h4: {\n              color: \"var(--tw-prose-headings)\",\n              fontWeight: \"600\",\n              marginTop: \"1.5em\",\n              marginBottom: \"0.5em\",\n              lineHeight: \"1.5\",\n            },\n            \"h4 strong\": {\n              fontWeight: \"700\",\n              color: \"inherit\",\n            },\n            img: {\n              marginTop: \"2em\",\n              marginBottom: \"2em\",\n            },\n            \"figure > *\": {\n              marginTop: \"0\",\n              marginBottom: \"0\",\n            },\n            figcaption: {\n              color: \"var(--tw-prose-captions)\",\n              fontSize: \"0.875em\",\n              lineHeight: \"1.4285714\",\n              marginTop: \"0.8571429em\",\n            },\n            code: {\n              color: \"var(--tw-prose-code)\",\n              fontWeight: \"600\",\n              fontSize: \"0.875em\",\n            },\n            \"code::before\": {\n              content: '\"`\"',\n            },\n            \"code::after\": {\n              content: '\"`\"',\n            },\n            \"a code\": {\n              color: \"inherit\",\n            },\n            \"h1 code\": {\n              color: \"inherit\",\n            },\n            \"h2 code\": {\n              color: \"inherit\",\n            },\n            \"h3 code\": {\n              color: \"inherit\",\n            },\n            \"h4 code\": {\n              color: \"inherit\",\n            },\n            \"blockquote code\": {\n              color: \"inherit\",\n            },\n            \"thead th code\": {\n              color: \"inherit\",\n            },\n            pre: {\n              color: \"var(--tw-prose-pre-code)\",\n              backgroundColor: \"var(--tw-prose-pre-bg)\",\n              overflowX: \"auto\",\n              fontWeight: \"400\",\n              fontSize: \"0.875em\",\n              lineHeight: \"1.7142857\",\n              marginTop: \"1.7142857em\",\n              marginBottom: \"1.7142857em\",\n              borderRadius: \"0.375rem\",\n              paddingTop: \"0.8571429em\",\n              paddingRight: \"1.1428571em\",\n              paddingBottom: \"0.8571429em\",\n              paddingLeft: \"1.1428571em\",\n            },\n            \"pre code\": {\n              backgroundColor: \"transparent\",\n              borderWidth: \"0\",\n              borderRadius: \"0\",\n              padding: \"0\",\n              fontWeight: \"inherit\",\n              color: \"inherit\",\n              fontSize: \"inherit\",\n              fontFamily: \"inherit\",\n              lineHeight: \"inherit\",\n            },\n            \"pre code::before\": {\n              content: \"none\",\n            },\n            \"pre code::after\": {\n              content: \"none\",\n            },\n            table: {\n              width: \"100%\",\n              tableLayout: \"auto\",\n              textAlign: \"left\",\n              marginTop: \"2em\",\n              marginBottom: \"2em\",\n            },\n            thead: {\n              borderBottomWidth: \"1px\",\n              borderBottomColor: \"var(--tw-prose-th-borders)\",\n            },\n            \"thead th\": {\n              color: \"var(--tw-prose-headings)\",\n              fontWeight: \"600\",\n              verticalAlign: \"bottom\",\n              paddingRight: \"0.5714286em\",\n              paddingBottom: \"0.5714286em\",\n              paddingLeft: \"0.5714286em\",\n            },\n            \"thead th:first-child\": {\n              paddingLeft: \"0\",\n            },\n            \"thead th:last-child\": {\n              paddingRight: \"0\",\n            },\n            \"tbody tr\": {\n              borderBottomWidth: \"1px\",\n              borderBottomColor: \"var(--tw-prose-td-borders)\",\n            },\n            \"tbody tr:last-child\": {\n              borderBottomWidth: \"0\",\n            },\n            \"tbody td\": {\n              verticalAlign: \"baseline\",\n            },\n            tfoot: {\n              borderTopWidth: \"1px\",\n              borderTopColor: \"var(--tw-prose-th-borders)\",\n            },\n            \"tfoot td\": {\n              verticalAlign: \"top\",\n            },\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n\nexport default config\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/joshglen/Downloads/unified-app-final/types.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
